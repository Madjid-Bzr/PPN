/users/user2222/NPB3.4.1-MZ/NPB3.4-MZ-MPI/LU-MZ/jacld.f90: 5 - 357
--------------------------------------------------------------------------------

5:       subroutine jacld(k, u, rho_i, qs, a, b, c, d,  &
[...]
40:             do i = ist, iend
41: 
42: !---------------------------------------------------------------------
43: !   form the block diagonal
44: !---------------------------------------------------------------------
45:                tmp1 = rho_i(i,j,k)
46:                tmp2 = tmp1 * tmp1
47:                tmp3 = tmp1 * tmp2
48: 
49:                d(1,1,i,j) =  1.0d0  &
50:      &                       + dt * 2.0d0 * (   tx1 * dx1  &
51:      &                                          + ty1 * dy1  &
52:      &                                          + tz1 * dz1 )
53:                d(1,2,i,j) =  0.0d0
54:                d(1,3,i,j) =  0.0d0
55:                d(1,4,i,j) =  0.0d0
56:                d(1,5,i,j) =  0.0d0
57: 
58:                d(2,1,i,j) = -dt * 2.0d0  &
59:      &          * (  tx1 * r43 + ty1 + tz1  )  &
60:      &          * c34 * tmp2 * u(2,i,j,k)
[...]
66:      &                             + tz1 * dz2  )
67:                d(2,3,i,j) = 0.0d0
68:                d(2,4,i,j) = 0.0d0
69:                d(2,5,i,j) = 0.0d0
70: 
71:                d(3,1,i,j) = -dt * 2.0d0  &
72:      &           * (  tx1 + ty1 * r43 + tz1  )  &
73:      &           * c34 * tmp2 * u(3,i,j,k)
74:                d(3,2,i,j) = 0.0d0
[...]
80:      &                           + tz1 * dz3 )
81:                d(3,4,i,j) = 0.0d+00
82:                d(3,5,i,j) = 0.0d0
83: 
84:                d(4,1,i,j) = -dt * 2.0d0  &
85:      &           * (  tx1 + ty1 + tz1 * r43  )  &
86:      &           * c34 * tmp2 * u(4,i,j,k)
87:                d(4,2,i,j) = 0.0d0
88:                d(4,3,i,j) = 0.0d0
[...]
94:      &                           + tz1 * dz4 )
95:                d(4,5,i,j) = 0.0d0
[...]
108:      &   + ( tx1 + ty1 + tz1 ) * c1345 * tmp2 * u(5,i,j,k) )
109: 
110:                d(5,2,i,j) = dt * 2.0d0 * tmp2 * u(2,i,j,k)  &
111:      & * ( tx1 * ( r43*c34 - c1345 )  &
112:      &   + ty1 * (     c34 - c1345 )  &
113:      &   + tz1 * (     c34 - c1345 ) )
114:                d(5,3,i,j) = dt * 2.0d0 * tmp2 * u(3,i,j,k)  &
115:      & * ( tx1 * ( c34 - c1345 )  &
116:      &   + ty1 * ( r43*c34 -c1345 )  &
117:      &   + tz1 * ( c34 - c1345 ) )
118:                d(5,4,i,j) = dt * 2.0d0 * tmp2 * u(4,i,j,k)  &
119:      & * ( tx1 * ( c34 - c1345 )  &
120:      &   + ty1 * ( c34 - c1345 )  &
121:      &   + tz1 * ( r43*c34 - c1345 ) )
122:                d(5,5,i,j) = 1.0d0  &
123:      &   + dt * 2.0d0 * ( tx1  + ty1 + tz1 ) * c1345 * tmp1  &
124:      &   + dt * 2.0d0 * (  tx1 * dx5  &
125:      &                    +  ty1 * dy5  &
126:      &                    +  tz1 * dz5 )
127: 
128: !---------------------------------------------------------------------
129: !   form the first block sub-diagonal
130: !---------------------------------------------------------------------
131:                tmp1 = rho_i(i,j,k-1)
132:                tmp2 = tmp1 * tmp1
133:                tmp3 = tmp1 * tmp2
134: 
135:                a(1,1,i,j) = - dt * tz1 * dz1
136:                a(1,2,i,j) =   0.0d0
137:                a(1,3,i,j) =   0.0d0
138:                a(1,4,i,j) = - dt * tz2
139:                a(1,5,i,j) =   0.0d0
140: 
141:                a(2,1,i,j) = - dt * tz2  &
142:      &           * ( - ( u(2,i,j,k-1)*u(4,i,j,k-1) ) * tmp2 )  &
143:      &           - dt * tz1 * ( - c34 * tmp2 * u(2,i,j,k-1) )
144:                a(2,2,i,j) = - dt * tz2 * ( u(4,i,j,k-1) * tmp1 )  &
145:      &           - dt * tz1 * c34 * tmp1  &
146:      &           - dt * tz1 * dz2 
147:                a(2,3,i,j) = 0.0d0
148:                a(2,4,i,j) = - dt * tz2 * ( u(2,i,j,k-1) * tmp1 )
149:                a(2,5,i,j) = 0.0d0
150: 
151:                a(3,1,i,j) = - dt * tz2  &
152:      &           * ( - ( u(3,i,j,k-1)*u(4,i,j,k-1) ) * tmp2 )  &
153:      &           - dt * tz1 * ( - c34 * tmp2 * u(3,i,j,k-1) )
154:                a(3,2,i,j) = 0.0d0
155:                a(3,3,i,j) = - dt * tz2 * ( u(4,i,j,k-1) * tmp1 )  &
156:      &           - dt * tz1 * ( c34 * tmp1 )  &
157:      &           - dt * tz1 * dz3
158:                a(3,4,i,j) = - dt * tz2 * ( u(3,i,j,k-1) * tmp1 )
159:                a(3,5,i,j) = 0.0d0
160: 
161:                a(4,1,i,j) = - dt * tz2  &
162:      &        * ( - ( u(4,i,j,k-1) * tmp1 ) ** 2  &
163:      &            + c2 * qs(i,j,k-1) * tmp1 )  &
164:      &        - dt * tz1 * ( - r43 * c34 * tmp2 * u(4,i,j,k-1) )
165:                a(4,2,i,j) = - dt * tz2  &
166:      &             * ( - c2 * ( u(2,i,j,k-1) * tmp1 ) )
167:                a(4,3,i,j) = - dt * tz2  &
168:      &             * ( - c2 * ( u(3,i,j,k-1) * tmp1 ) )
169:                a(4,4,i,j) = - dt * tz2 * ( 2.0d0 - c2 )  &
170:      &             * ( u(4,i,j,k-1) * tmp1 )  &
171:      &             - dt * tz1 * ( r43 * c34 * tmp1 )  &
172:      &             - dt * tz1 * dz4
173:                a(4,5,i,j) = - dt * tz2 * c2
[...]
183:      &          - c1345 * tmp2 * u(5,i,j,k-1) )
184:                a(5,2,i,j) = - dt * tz2  &
185:      &       * ( - c2 * ( u(2,i,j,k-1)*u(4,i,j,k-1) ) * tmp2 )  &
186:      &       - dt * tz1 * ( c34 - c1345 ) * tmp2 * u(2,i,j,k-1)
187:                a(5,3,i,j) = - dt * tz2  &
188:      &       * ( - c2 * ( u(3,i,j,k-1)*u(4,i,j,k-1) ) * tmp2 )  &
189:      &       - dt * tz1 * ( c34 - c1345 ) * tmp2 * u(3,i,j,k-1)
[...]
195:      &       - dt * tz1 * ( r43*c34 - c1345 ) * tmp2 * u(4,i,j,k-1)
196:                a(5,5,i,j) = - dt * tz2  &
197:      &       * ( c1 * ( u(4,i,j,k-1) * tmp1 ) )  &
198:      &       - dt * tz1 * c1345 * tmp1  &
199:      &       - dt * tz1 * dz5
200: 
201: !---------------------------------------------------------------------
202: !   form the second block sub-diagonal
203: !---------------------------------------------------------------------
204:                tmp1 = rho_i(i,j-1,k)
205:                tmp2 = tmp1 * tmp1
206:                tmp3 = tmp1 * tmp2
207: 
208:                b(1,1,i,j) = - dt * ty1 * dy1
209:                b(1,2,i,j) =   0.0d0
210:                b(1,3,i,j) = - dt * ty2
211:                b(1,4,i,j) =   0.0d0
212:                b(1,5,i,j) =   0.0d0
213: 
214:                b(2,1,i,j) = - dt * ty2  &
215:      &           * ( - ( u(2,i,j-1,k)*u(3,i,j-1,k) ) * tmp2 )  &
216:      &           - dt * ty1 * ( - c34 * tmp2 * u(2,i,j-1,k) )
217:                b(2,2,i,j) = - dt * ty2 * ( u(3,i,j-1,k) * tmp1 )  &
218:      &          - dt * ty1 * ( c34 * tmp1 )  &
219:      &          - dt * ty1 * dy2
220:                b(2,3,i,j) = - dt * ty2 * ( u(2,i,j-1,k) * tmp1 )
221:                b(2,4,i,j) = 0.0d0
222:                b(2,5,i,j) = 0.0d0
223: 
224:                b(3,1,i,j) = - dt * ty2  &
225:      &           * ( - ( u(3,i,j-1,k) * tmp1 ) ** 2  &
226:      &       + c2 * ( qs(i,j-1,k) * tmp1 ) )  &
227:      &       - dt * ty1 * ( - r43 * c34 * tmp2 * u(3,i,j-1,k) )
228:                b(3,2,i,j) = - dt * ty2  &
229:      &                   * ( - c2 * ( u(2,i,j-1,k) * tmp1 ) )
230:                b(3,3,i,j) = - dt * ty2 * ( ( 2.0d0 - c2 )  &
231:      &                   * ( u(3,i,j-1,k) * tmp1 ) )  &
232:      &       - dt * ty1 * ( r43 * c34 * tmp1 )  &
233:      &       - dt * ty1 * dy3
234:                b(3,4,i,j) = - dt * ty2  &
235:      &                   * ( - c2 * ( u(4,i,j-1,k) * tmp1 ) )
236:                b(3,5,i,j) = - dt * ty2 * c2
237: 
238:                b(4,1,i,j) = - dt * ty2  &
239:      &              * ( - ( u(3,i,j-1,k)*u(4,i,j-1,k) ) * tmp2 )  &
240:      &       - dt * ty1 * ( - c34 * tmp2 * u(4,i,j-1,k) )
241:                b(4,2,i,j) = 0.0d0
242:                b(4,3,i,j) = - dt * ty2 * ( u(4,i,j-1,k) * tmp1 )
243:                b(4,4,i,j) = - dt * ty2 * ( u(3,i,j-1,k) * tmp1 )  &
244:      &                        - dt * ty1 * ( c34 * tmp1 )  &
245:      &                        - dt * ty1 * dy4
246:                b(4,5,i,j) = 0.0d0
[...]
256:      &              - c1345*tmp2*u(5,i,j-1,k) )
257:                b(5,2,i,j) = - dt * ty2  &
258:      &          * ( - c2 * ( u(2,i,j-1,k)*u(3,i,j-1,k) ) * tmp2 )  &
259:      &          - dt * ty1  &
260:      &          * ( c34 - c1345 ) * tmp2 * u(2,i,j-1,k)
[...]
267:      &          * ( r43*c34 - c1345 ) * tmp2 * u(3,i,j-1,k)
268:                b(5,4,i,j) = - dt * ty2  &
269:      &          * ( - c2 * ( u(3,i,j-1,k)*u(4,i,j-1,k) ) * tmp2 )  &
270:      &          - dt * ty1 * ( c34 - c1345 ) * tmp2 * u(4,i,j-1,k)
271:                b(5,5,i,j) = - dt * ty2  &
272:      &          * ( c1 * ( u(3,i,j-1,k) * tmp1 ) )  &
273:      &          - dt * ty1 * c1345 * tmp1  &
274:      &          - dt * ty1 * dy5
[...]
280:                tmp2 = tmp1 * tmp1
281:                tmp3 = tmp1 * tmp2
282: 
283:                c(1,1,i,j) = - dt * tx1 * dx1
284:                c(1,2,i,j) = - dt * tx2
285:                c(1,3,i,j) =   0.0d0
286:                c(1,4,i,j) =   0.0d0
287:                c(1,5,i,j) =   0.0d0
288: 
289:                c(2,1,i,j) = - dt * tx2  &
290:      &          * ( - ( u(2,i-1,j,k) * tmp1 ) ** 2  &
291:      &       + c2 * qs(i-1,j,k) * tmp1 )  &
292:      &          - dt * tx1 * ( - r43 * c34 * tmp2 * u(2,i-1,j,k) )
293:                c(2,2,i,j) = - dt * tx2  &
294:      &          * ( ( 2.0d0 - c2 ) * ( u(2,i-1,j,k) * tmp1 ) )  &
295:      &          - dt * tx1 * ( r43 * c34 * tmp1 )  &
296:      &          - dt * tx1 * dx2
297:                c(2,3,i,j) = - dt * tx2  &
298:      &              * ( - c2 * ( u(3,i-1,j,k) * tmp1 ) )
299:                c(2,4,i,j) = - dt * tx2  &
300:      &              * ( - c2 * ( u(4,i-1,j,k) * tmp1 ) )
301:                c(2,5,i,j) = - dt * tx2 * c2 
302: 
303:                c(3,1,i,j) = - dt * tx2  &
304:      &              * ( - ( u(2,i-1,j,k) * u(3,i-1,j,k) ) * tmp2 )  &
305:      &         - dt * tx1 * ( - c34 * tmp2 * u(3,i-1,j,k) )
306:                c(3,2,i,j) = - dt * tx2 * ( u(3,i-1,j,k) * tmp1 )
307:                c(3,3,i,j) = - dt * tx2 * ( u(2,i-1,j,k) * tmp1 )  &
308:      &          - dt * tx1 * ( c34 * tmp1 )  &
309:      &          - dt * tx1 * dx3
310:                c(3,4,i,j) = 0.0d0
311:                c(3,5,i,j) = 0.0d0
312: 
313:                c(4,1,i,j) = - dt * tx2  &
314:      &          * ( - ( u(2,i-1,j,k)*u(4,i-1,j,k) ) * tmp2 )  &
315:      &          - dt * tx1 * ( - c34 * tmp2 * u(4,i-1,j,k) )
316:                c(4,2,i,j) = - dt * tx2 * ( u(4,i-1,j,k) * tmp1 )
317:                c(4,3,i,j) = 0.0d0
318:                c(4,4,i,j) = - dt * tx2 * ( u(2,i-1,j,k) * tmp1 )  &
319:      &          - dt * tx1 * ( c34 * tmp1 )  &
320:      &          - dt * tx1 * dx4
321:                c(4,5,i,j) = 0.0d0
[...]
331:      &              - c1345 * tmp2 * u(5,i-1,j,k) )
[...]
338:      &           * ( r43*c34 - c1345 ) * tmp2 * u(2,i-1,j,k)
339:                c(5,3,i,j) = - dt * tx2  &
340:      &           * ( - c2 * ( u(3,i-1,j,k)*u(2,i-1,j,k) ) * tmp2 )  &
341:      &           - dt * tx1  &
342:      &           * (  c34 - c1345 ) * tmp2 * u(3,i-1,j,k)
343:                c(5,4,i,j) = - dt * tx2  &
344:      &           * ( - c2 * ( u(4,i-1,j,k)*u(2,i-1,j,k) ) * tmp2 )  &
345:      &           - dt * tx1  &
346:      &           * (  c34 - c1345 ) * tmp2 * u(4,i-1,j,k)
347:                c(5,5,i,j) = - dt * tx2  &
348:      &           * ( c1 * ( u(2,i-1,j,k) * tmp1 ) )  &
349:      &           - dt * tx1 * c1345 * tmp1  &
350:      &           - dt * tx1 * dx5
[...]
357:       end
