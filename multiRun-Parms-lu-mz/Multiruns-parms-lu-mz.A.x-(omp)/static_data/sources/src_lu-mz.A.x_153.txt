/users/user2222/NPB3.4.1-MZ/NPB3.4-MZ-OMP/LU-MZ/jacld.f90: 39 - 349
--------------------------------------------------------------------------------

39:             do i = 2, nx-1
40: 
41: !---------------------------------------------------------------------
42: !   form the block diagonal
43: !---------------------------------------------------------------------
44:                tmp1 = rho_i(i,j,k)
45:                tmp2 = tmp1 * tmp1
46:                tmp3 = tmp1 * tmp2
47: 
48:                d(1,1,i,j) =  1.0d0  &
49:      &                       + dt * 2.0d0 * (   tx1 * dx1  &
50:      &                                          + ty1 * dy1  &
51:      &                                          + tz1 * dz1 )
52:                d(1,2,i,j) =  0.0d0
53:                d(1,3,i,j) =  0.0d0
54:                d(1,4,i,j) =  0.0d0
55:                d(1,5,i,j) =  0.0d0
56: 
57:                d(2,1,i,j) = -dt * 2.0d0  &
58:      &          * (  tx1 * r43 + ty1 + tz1  )  &
59:      &          * c34 * tmp2 * u(2,i,j,k)
[...]
65:      &                             + tz1 * dz2  )
66:                d(2,3,i,j) = 0.0d0
67:                d(2,4,i,j) = 0.0d0
68:                d(2,5,i,j) = 0.0d0
69: 
70:                d(3,1,i,j) = -dt * 2.0d0  &
71:      &           * (  tx1 + ty1 * r43 + tz1  )  &
72:      &           * c34 * tmp2 * u(3,i,j,k)
73:                d(3,2,i,j) = 0.0d0
[...]
79:      &                           + tz1 * dz3 )
80:                d(3,4,i,j) = 0.0d+00
81:                d(3,5,i,j) = 0.0d0
82: 
83:                d(4,1,i,j) = -dt * 2.0d0  &
84:      &           * (  tx1 + ty1 + tz1 * r43  )  &
85:      &           * c34 * tmp2 * u(4,i,j,k)
86:                d(4,2,i,j) = 0.0d0
87:                d(4,3,i,j) = 0.0d0
[...]
93:      &                           + tz1 * dz4 )
94:                d(4,5,i,j) = 0.0d0
[...]
107:      &   + ( tx1 + ty1 + tz1 ) * c1345 * tmp2 * u(5,i,j,k) )
108: 
109:                d(5,2,i,j) = dt * 2.0d0 * tmp2 * u(2,i,j,k)  &
110:      & * ( tx1 * ( r43*c34 - c1345 )  &
111:      &   + ty1 * (     c34 - c1345 )  &
112:      &   + tz1 * (     c34 - c1345 ) )
113:                d(5,3,i,j) = dt * 2.0d0 * tmp2 * u(3,i,j,k)  &
114:      & * ( tx1 * ( c34 - c1345 )  &
115:      &   + ty1 * ( r43*c34 -c1345 )  &
116:      &   + tz1 * ( c34 - c1345 ) )
117:                d(5,4,i,j) = dt * 2.0d0 * tmp2 * u(4,i,j,k)  &
118:      & * ( tx1 * ( c34 - c1345 )  &
119:      &   + ty1 * ( c34 - c1345 )  &
120:      &   + tz1 * ( r43*c34 - c1345 ) )
121:                d(5,5,i,j) = 1.0d0  &
122:      &   + dt * 2.0d0 * ( tx1  + ty1 + tz1 ) * c1345 * tmp1  &
123:      &   + dt * 2.0d0 * (  tx1 * dx5  &
124:      &                    +  ty1 * dy5  &
125:      &                    +  tz1 * dz5 )
126: 
127: !---------------------------------------------------------------------
128: !   form the first block sub-diagonal
129: !---------------------------------------------------------------------
130:                tmp1 = rho_i(i,j,k-1)
131:                tmp2 = tmp1 * tmp1
132:                tmp3 = tmp1 * tmp2
133: 
134:                a(1,1,i,j) = - dt * tz1 * dz1
135:                a(1,2,i,j) =   0.0d0
136:                a(1,3,i,j) =   0.0d0
137:                a(1,4,i,j) = - dt * tz2
138:                a(1,5,i,j) =   0.0d0
139: 
140:                a(2,1,i,j) = - dt * tz2  &
141:      &           * ( - ( u(2,i,j,k-1)*u(4,i,j,k-1) ) * tmp2 )  &
142:      &           - dt * tz1 * ( - c34 * tmp2 * u(2,i,j,k-1) )
143:                a(2,2,i,j) = - dt * tz2 * ( u(4,i,j,k-1) * tmp1 )  &
144:      &           - dt * tz1 * c34 * tmp1  &
145:      &           - dt * tz1 * dz2 
146:                a(2,3,i,j) = 0.0d0
147:                a(2,4,i,j) = - dt * tz2 * ( u(2,i,j,k-1) * tmp1 )
148:                a(2,5,i,j) = 0.0d0
149: 
150:                a(3,1,i,j) = - dt * tz2  &
151:      &           * ( - ( u(3,i,j,k-1)*u(4,i,j,k-1) ) * tmp2 )  &
152:      &           - dt * tz1 * ( - c34 * tmp2 * u(3,i,j,k-1) )
153:                a(3,2,i,j) = 0.0d0
154:                a(3,3,i,j) = - dt * tz2 * ( u(4,i,j,k-1) * tmp1 )  &
155:      &           - dt * tz1 * ( c34 * tmp1 )  &
156:      &           - dt * tz1 * dz3
157:                a(3,4,i,j) = - dt * tz2 * ( u(3,i,j,k-1) * tmp1 )
158:                a(3,5,i,j) = 0.0d0
159: 
160:                a(4,1,i,j) = - dt * tz2  &
161:      &        * ( - ( u(4,i,j,k-1) * tmp1 ) ** 2  &
162:      &            + c2 * qs(i,j,k-1) * tmp1 )  &
163:      &        - dt * tz1 * ( - r43 * c34 * tmp2 * u(4,i,j,k-1) )
164:                a(4,2,i,j) = - dt * tz2  &
165:      &             * ( - c2 * ( u(2,i,j,k-1) * tmp1 ) )
166:                a(4,3,i,j) = - dt * tz2  &
167:      &             * ( - c2 * ( u(3,i,j,k-1) * tmp1 ) )
168:                a(4,4,i,j) = - dt * tz2 * ( 2.0d0 - c2 )  &
169:      &             * ( u(4,i,j,k-1) * tmp1 )  &
170:      &             - dt * tz1 * ( r43 * c34 * tmp1 )  &
171:      &             - dt * tz1 * dz4
172:                a(4,5,i,j) = - dt * tz2 * c2
[...]
182:      &          - c1345 * tmp2 * u(5,i,j,k-1) )
183:                a(5,2,i,j) = - dt * tz2  &
184:      &       * ( - c2 * ( u(2,i,j,k-1)*u(4,i,j,k-1) ) * tmp2 )  &
185:      &       - dt * tz1 * ( c34 - c1345 ) * tmp2 * u(2,i,j,k-1)
186:                a(5,3,i,j) = - dt * tz2  &
187:      &       * ( - c2 * ( u(3,i,j,k-1)*u(4,i,j,k-1) ) * tmp2 )  &
188:      &       - dt * tz1 * ( c34 - c1345 ) * tmp2 * u(3,i,j,k-1)
[...]
194:      &       - dt * tz1 * ( r43*c34 - c1345 ) * tmp2 * u(4,i,j,k-1)
195:                a(5,5,i,j) = - dt * tz2  &
196:      &       * ( c1 * ( u(4,i,j,k-1) * tmp1 ) )  &
197:      &       - dt * tz1 * c1345 * tmp1  &
198:      &       - dt * tz1 * dz5
199: 
200: !---------------------------------------------------------------------
201: !   form the second block sub-diagonal
202: !---------------------------------------------------------------------
203:                tmp1 = rho_i(i,j-1,k)
204:                tmp2 = tmp1 * tmp1
205:                tmp3 = tmp1 * tmp2
206: 
207:                b(1,1,i,j) = - dt * ty1 * dy1
208:                b(1,2,i,j) =   0.0d0
209:                b(1,3,i,j) = - dt * ty2
210:                b(1,4,i,j) =   0.0d0
211:                b(1,5,i,j) =   0.0d0
212: 
213:                b(2,1,i,j) = - dt * ty2  &
214:      &           * ( - ( u(2,i,j-1,k)*u(3,i,j-1,k) ) * tmp2 )  &
215:      &           - dt * ty1 * ( - c34 * tmp2 * u(2,i,j-1,k) )
216:                b(2,2,i,j) = - dt * ty2 * ( u(3,i,j-1,k) * tmp1 )  &
217:      &          - dt * ty1 * ( c34 * tmp1 )  &
218:      &          - dt * ty1 * dy2
219:                b(2,3,i,j) = - dt * ty2 * ( u(2,i,j-1,k) * tmp1 )
220:                b(2,4,i,j) = 0.0d0
221:                b(2,5,i,j) = 0.0d0
222: 
223:                b(3,1,i,j) = - dt * ty2  &
224:      &           * ( - ( u(3,i,j-1,k) * tmp1 ) ** 2  &
225:      &       + c2 * ( qs(i,j-1,k) * tmp1 ) )  &
226:      &       - dt * ty1 * ( - r43 * c34 * tmp2 * u(3,i,j-1,k) )
227:                b(3,2,i,j) = - dt * ty2  &
228:      &                   * ( - c2 * ( u(2,i,j-1,k) * tmp1 ) )
229:                b(3,3,i,j) = - dt * ty2 * ( ( 2.0d0 - c2 )  &
230:      &                   * ( u(3,i,j-1,k) * tmp1 ) )  &
231:      &       - dt * ty1 * ( r43 * c34 * tmp1 )  &
232:      &       - dt * ty1 * dy3
233:                b(3,4,i,j) = - dt * ty2  &
234:      &                   * ( - c2 * ( u(4,i,j-1,k) * tmp1 ) )
235:                b(3,5,i,j) = - dt * ty2 * c2
236: 
237:                b(4,1,i,j) = - dt * ty2  &
238:      &              * ( - ( u(3,i,j-1,k)*u(4,i,j-1,k) ) * tmp2 )  &
239:      &       - dt * ty1 * ( - c34 * tmp2 * u(4,i,j-1,k) )
240:                b(4,2,i,j) = 0.0d0
241:                b(4,3,i,j) = - dt * ty2 * ( u(4,i,j-1,k) * tmp1 )
242:                b(4,4,i,j) = - dt * ty2 * ( u(3,i,j-1,k) * tmp1 )  &
243:      &                        - dt * ty1 * ( c34 * tmp1 )  &
244:      &                        - dt * ty1 * dy4
245:                b(4,5,i,j) = 0.0d0
[...]
255:      &              - c1345*tmp2*u(5,i,j-1,k) )
256:                b(5,2,i,j) = - dt * ty2  &
257:      &          * ( - c2 * ( u(2,i,j-1,k)*u(3,i,j-1,k) ) * tmp2 )  &
258:      &          - dt * ty1  &
259:      &          * ( c34 - c1345 ) * tmp2 * u(2,i,j-1,k)
[...]
266:      &          * ( r43*c34 - c1345 ) * tmp2 * u(3,i,j-1,k)
267:                b(5,4,i,j) = - dt * ty2  &
268:      &          * ( - c2 * ( u(3,i,j-1,k)*u(4,i,j-1,k) ) * tmp2 )  &
269:      &          - dt * ty1 * ( c34 - c1345 ) * tmp2 * u(4,i,j-1,k)
270:                b(5,5,i,j) = - dt * ty2  &
271:      &          * ( c1 * ( u(3,i,j-1,k) * tmp1 ) )  &
272:      &          - dt * ty1 * c1345 * tmp1  &
273:      &          - dt * ty1 * dy5
[...]
279:                tmp2 = tmp1 * tmp1
280:                tmp3 = tmp1 * tmp2
281: 
282:                c(1,1,i,j) = - dt * tx1 * dx1
283:                c(1,2,i,j) = - dt * tx2
284:                c(1,3,i,j) =   0.0d0
285:                c(1,4,i,j) =   0.0d0
286:                c(1,5,i,j) =   0.0d0
287: 
288:                c(2,1,i,j) = - dt * tx2  &
289:      &          * ( - ( u(2,i-1,j,k) * tmp1 ) ** 2  &
290:      &       + c2 * qs(i-1,j,k) * tmp1 )  &
291:      &          - dt * tx1 * ( - r43 * c34 * tmp2 * u(2,i-1,j,k) )
292:                c(2,2,i,j) = - dt * tx2  &
293:      &          * ( ( 2.0d0 - c2 ) * ( u(2,i-1,j,k) * tmp1 ) )  &
294:      &          - dt * tx1 * ( r43 * c34 * tmp1 )  &
295:      &          - dt * tx1 * dx2
296:                c(2,3,i,j) = - dt * tx2  &
297:      &              * ( - c2 * ( u(3,i-1,j,k) * tmp1 ) )
298:                c(2,4,i,j) = - dt * tx2  &
299:      &              * ( - c2 * ( u(4,i-1,j,k) * tmp1 ) )
300:                c(2,5,i,j) = - dt * tx2 * c2 
301: 
302:                c(3,1,i,j) = - dt * tx2  &
303:      &              * ( - ( u(2,i-1,j,k) * u(3,i-1,j,k) ) * tmp2 )  &
304:      &         - dt * tx1 * ( - c34 * tmp2 * u(3,i-1,j,k) )
305:                c(3,2,i,j) = - dt * tx2 * ( u(3,i-1,j,k) * tmp1 )
306:                c(3,3,i,j) = - dt * tx2 * ( u(2,i-1,j,k) * tmp1 )  &
307:      &          - dt * tx1 * ( c34 * tmp1 )  &
308:      &          - dt * tx1 * dx3
309:                c(3,4,i,j) = 0.0d0
310:                c(3,5,i,j) = 0.0d0
311: 
312:                c(4,1,i,j) = - dt * tx2  &
313:      &          * ( - ( u(2,i-1,j,k)*u(4,i-1,j,k) ) * tmp2 )  &
314:      &          - dt * tx1 * ( - c34 * tmp2 * u(4,i-1,j,k) )
315:                c(4,2,i,j) = - dt * tx2 * ( u(4,i-1,j,k) * tmp1 )
316:                c(4,3,i,j) = 0.0d0
317:                c(4,4,i,j) = - dt * tx2 * ( u(2,i-1,j,k) * tmp1 )  &
318:      &          - dt * tx1 * ( c34 * tmp1 )  &
319:      &          - dt * tx1 * dx4
320:                c(4,5,i,j) = 0.0d0
[...]
330:      &              - c1345 * tmp2 * u(5,i-1,j,k) )
[...]
337:      &           * ( r43*c34 - c1345 ) * tmp2 * u(2,i-1,j,k)
338:                c(5,3,i,j) = - dt * tx2  &
339:      &           * ( - c2 * ( u(3,i-1,j,k)*u(2,i-1,j,k) ) * tmp2 )  &
340:      &           - dt * tx1  &
341:      &           * (  c34 - c1345 ) * tmp2 * u(3,i-1,j,k)
342:                c(5,4,i,j) = - dt * tx2  &
343:      &           * ( - c2 * ( u(4,i-1,j,k)*u(2,i-1,j,k) ) * tmp2 )  &
344:      &           - dt * tx1  &
345:      &           * (  c34 - c1345 ) * tmp2 * u(4,i-1,j,k)
346:                c(5,5,i,j) = - dt * tx2  &
347:      &           * ( c1 * ( u(2,i-1,j,k) * tmp1 ) )  &
348:      &           - dt * tx1 * c1345 * tmp1  &
349:      &           - dt * tx1 * dx5
