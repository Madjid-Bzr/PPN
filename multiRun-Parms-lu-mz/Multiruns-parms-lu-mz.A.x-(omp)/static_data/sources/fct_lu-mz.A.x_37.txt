/users/user2222/NPB3.4.1-MZ/NPB3.4-MZ-OMP/LU-MZ/rhs.f90: 40 - 460
--------------------------------------------------------------------------------

40: !$OMP& u51km1,u41km1,u31km1,u21km1,u51k,u41k,u31k,u21k,u41)
41: 
42:       do k = 1, nz
43: !$OMP DO SCHEDULE(STATIC)
44:          do j = 1, ny
45:             do i = 1, nx
46:                do m = 1, 5
47:                   rsd(m,i,j,k) = - frct(m,i,j,k)
48:                end do
49:                tmp = 1.0d+00 / u(1,i,j,k)
50:                rho_i(i,j,k) = tmp
51:                qs(i,j,k) = 0.50d+00 * (  u(2,i,j,k) * u(2,i,j,k)  &
52:      &                         + u(3,i,j,k) * u(3,i,j,k)  &
53:      &                         + u(4,i,j,k) * u(4,i,j,k) )  &
54:      &                      * tmp
55:             end do
56:          end do
57: !$OMP END DO nowait
58:       end do
59: !$OMP BARRIER
60: 
61: !$OMP MASTER
62:       if (timeron) call timer_start(t_rhsx)
[...]
68:       do k = 2, nz - 1
69: !$OMP DO SCHEDULE(STATIC)
70:          do j = 2, ny-1
71:             do i = 1, nx
72:                flux(1,i) = u(2,i,j,k)
73:                u21 = u(2,i,j,k) * rho_i(i,j,k)
74: 
75:                q = qs(i,j,k)
76: 
77:                flux(2,i) = u(2,i,j,k) * u21 + c2 *  &
78:      &                        ( u(5,i,j,k) - q )
79:                flux(3,i) = u(3,i,j,k) * u21
80:                flux(4,i) = u(4,i,j,k) * u21
81:                flux(5,i) = ( c1 * u(5,i,j,k) - c2 * q ) * u21
82:             end do
83: 
84:             do i = 2, nx-1
85:                do m = 1, 5
86:                   rsd(m,i,j,k) =  rsd(m,i,j,k)  &
87:      &                 - tx2 * ( flux(m,i+1) - flux(m,i-1) )
88:                end do
89:             end do
90: 
91:             do i = 2, nx
92:                tmp = rho_i(i,j,k)
93: 
94:                u21i = tmp * u(2,i,j,k)
95:                u31i = tmp * u(3,i,j,k)
96:                u41i = tmp * u(4,i,j,k)
97:                u51i = tmp * u(5,i,j,k)
98: 
99:                tmp = rho_i(i-1,j,k)
100: 
101:                u21im1 = tmp * u(2,i-1,j,k)
102:                u31im1 = tmp * u(3,i-1,j,k)
103:                u41im1 = tmp * u(4,i-1,j,k)
104:                u51im1 = tmp * u(5,i-1,j,k)
105: 
106:                flux(2,i) = (4.0d+00/3.0d+00) * tx3 * (u21i-u21im1)
107:                flux(3,i) = tx3 * ( u31i - u31im1 )
108:                flux(4,i) = tx3 * ( u41i - u41im1 )
[...]
114:      &              + c1 * c5 * tx3 * ( u51i - u51im1 )
115:             end do
116: 
117:             do i = 2, nx-1
118:                rsd(1,i,j,k) = rsd(1,i,j,k)  &
119:      &              + dx1 * tx1 * (            u(1,i-1,j,k)  &
120:      &                             - 2.0d+00 * u(1,i,j,k)  &
121:      &                             +           u(1,i+1,j,k) )
122:                rsd(2,i,j,k) = rsd(2,i,j,k)  &
123:      &          + tx3 * c3 * c4 * ( flux(2,i+1) - flux(2,i) )  &
124:      &              + dx2 * tx1 * (            u(2,i-1,j,k)  &
125:      &                             - 2.0d+00 * u(2,i,j,k)  &
126:      &                             +           u(2,i+1,j,k) )
127:                rsd(3,i,j,k) = rsd(3,i,j,k)  &
128:      &          + tx3 * c3 * c4 * ( flux(3,i+1) - flux(3,i) )  &
129:      &              + dx3 * tx1 * (            u(3,i-1,j,k)  &
130:      &                             - 2.0d+00 * u(3,i,j,k)  &
131:      &                             +           u(3,i+1,j,k) )
132:                rsd(4,i,j,k) = rsd(4,i,j,k)  &
133:      &          + tx3 * c3 * c4 * ( flux(4,i+1) - flux(4,i) )  &
134:      &              + dx4 * tx1 * (            u(4,i-1,j,k)  &
135:      &                             - 2.0d+00 * u(4,i,j,k)  &
136:      &                             +           u(4,i+1,j,k) )
137:                rsd(5,i,j,k) = rsd(5,i,j,k)  &
138:      &          + tx3 * c3 * c4 * ( flux(5,i+1) - flux(5,i) )  &
139:      &              + dx5 * tx1 * (            u(5,i-1,j,k)  &
140:      &                             - 2.0d+00 * u(5,i,j,k)  &
141:      &                             +           u(5,i+1,j,k) )
[...]
151:      &                      +           u(m,4,j,k) )
152:                rsd(m,3,j,k) = rsd(m,3,j,k)  &
153:      &           - dssp * ( - 4.0d+00 * u(m,2,j,k)  &
154:      &                      + 6.0d+00 * u(m,3,j,k)  &
155:      &                      - 4.0d+00 * u(m,4,j,k)  &
156:      &                      +           u(m,5,j,k) )
157:             end do
158: 
159:             do i = 4, nx - 3
[...]
166:      &                        +           u(m,i+2,j,k) )
[...]
176:      &                      - 4.0d+00 * u(m,nx-1,j,k)  )
177:                rsd(m,nx-1,j,k) = rsd(m,nx-1,j,k)  &
178:      &           - dssp * (             u(m,nx-3,j,k)  &
179:      &                      - 4.0d+00 * u(m,nx-2,j,k)  &
180:      &                      + 5.0d+00 * u(m,nx-1,j,k) )
[...]
186: !$OMP BARRIER
187: 
188: !$OMP MASTER
189:       if (timeron) call timer_stop(t_rhsx)
190: 
191:       if (timeron) call timer_start(t_rhsy)
192: !$OMP END MASTER
193: !---------------------------------------------------------------------
194: !   eta-direction flux differences
195: !---------------------------------------------------------------------
196: !$OMP DO SCHEDULE(STATIC)
197:       do k = 2, nz - 1
198:          do i = 2, nx-1
199:             do j = 1, ny
200:                utmp(1,j) = u(1,i,j,k)
201:                utmp(2,j) = u(2,i,j,k)
202:                utmp(3,j) = u(3,i,j,k)
203:                utmp(4,j) = u(4,i,j,k)
204:                utmp(5,j) = u(5,i,j,k)
205:                utmp(6,j) = rho_i(i,j,k)
206:             end do
207: 
208:             do j = 1, ny
209:                flux(1,j) = utmp(3,j)
210:                u31 = utmp(3,j) * utmp(6,j)
211: 
212:                q = qs(i,j,k)
213: 
214:                flux(2,j) = utmp(2,j) * u31 
215:                flux(3,j) = utmp(3,j) * u31 + c2 * (utmp(5,j)-q)
216:                flux(4,j) = utmp(4,j) * u31
217:                flux(5,j) = ( c1 * utmp(5,j) - c2 * q ) * u31
218:             end do
219: 
220:             do j = 2, ny-1
221:                do m = 1, 5
222:                   rsd(m,i,j,k) =  rsd(m,i,j,k)  &
223:      &                   - ty2 * ( flux(m,j+1) - flux(m,j-1) )
224:                end do
225:             end do
226: 
227:             do j = 2, ny
228:                tmp = utmp(6,j)
229: 
230:                u21j = tmp * utmp(2,j)
231:                u31j = tmp * utmp(3,j)
232:                u41j = tmp * utmp(4,j)
233:                u51j = tmp * utmp(5,j)
234: 
235:                tmp = utmp(6,j-1)
236:                u21jm1 = tmp * utmp(2,j-1)
237:                u31jm1 = tmp * utmp(3,j-1)
238:                u41jm1 = tmp * utmp(4,j-1)
239:                u51jm1 = tmp * utmp(5,j-1)
240: 
241:                flux(2,j) = ty3 * ( u21j - u21jm1 )
242:                flux(3,j) = (4.0d+00/3.0d+00) * ty3 * (u31j-u31jm1)
243:                flux(4,j) = ty3 * ( u41j - u41jm1 )
[...]
249:      &              + c1 * c5 * ty3 * ( u51j - u51jm1 )
250:             end do
251: 
252:             do j = 2, ny-1
253: 
254:                rsd(1,i,j,k) = rsd(1,i,j,k)  &
255:      &              + dy1 * ty1 * (            utmp(1,j-1)  &
256:      &                             - 2.0d+00 * utmp(1,j)  &
257:      &                             +           utmp(1,j+1) )
[...]
263:      &                             +           utmp(2,j+1) )
[...]
269:      &                             +           utmp(3,j+1) )
[...]
275:      &                             +           utmp(4,j+1) )
[...]
281:      &                             +           utmp(5,j+1) )
[...]
292:      &                      +           utmp(m,4) )
293:                rsd(m,i,3,k) = rsd(m,i,3,k)  &
294:      &           - dssp * ( - 4.0d+00 * utmp(m,2)  &
295:      &                      + 6.0d+00 * utmp(m,3)  &
296:      &                      - 4.0d+00 * utmp(m,4)  &
297:      &                      +           utmp(m,5) )
298:             end do
299: 
300:             do j = 4, ny - 3
[...]
307:      &                        +           utmp(m,j+2) )
[...]
316:      &                      - 4.0d+00 * utmp(m,ny-1)  )
317:                rsd(m,i,ny-1,k) = rsd(m,i,ny-1,k)  &
318:      &           - dssp * (             utmp(m,ny-3)  &
319:      &                      - 4.0d+00 * utmp(m,ny-2)  &
320:      &                      + 5.0d+00 * utmp(m,ny-1) )
[...]
327: !$OMP MASTER
328:       if (timeron) call timer_stop(t_rhsy)
329: 
330:       if (timeron) call timer_start(t_rhsz)
331: !$OMP END MASTER
332: !---------------------------------------------------------------------
333: !   zeta-direction flux differences
334: !---------------------------------------------------------------------
335: !$OMP DO SCHEDULE(STATIC)
336:       do j = 2, ny-1
337:          do i = 2, nx-1
338:             do k = 1, nz
339:                utmp(1,k) = u(1,i,j,k)
340:                utmp(2,k) = u(2,i,j,k)
341:                utmp(3,k) = u(3,i,j,k)
342:                utmp(4,k) = u(4,i,j,k)
343:                utmp(5,k) = u(5,i,j,k)
344:                utmp(6,k) = rho_i(i,j,k)
345:             end do
346: 
347:             do k = 1, nz
348:                flux(1,k) = utmp(4,k)
349:                u41 = utmp(4,k) * utmp(6,k)
350: 
351:                q = qs(i,j,k)
352: 
353:                flux(2,k) = utmp(2,k) * u41 
354:                flux(3,k) = utmp(3,k) * u41 
355:                flux(4,k) = utmp(4,k) * u41 + c2 * (utmp(5,k)-q)
356:                flux(5,k) = ( c1 * utmp(5,k) - c2 * q ) * u41
357:             end do
358: 
359:             do k = 2, nz - 1
360:                do m = 1, 5
361:                   rtmp(m,k) =  rsd(m,i,j,k)  &
362:      &                - tz2 * ( flux(m,k+1) - flux(m,k-1) )
363:                end do
364:             end do
365: 
366:             do k = 2, nz
367:                tmp = utmp(6,k)
368: 
369:                u21k = tmp * utmp(2,k)
370:                u31k = tmp * utmp(3,k)
371:                u41k = tmp * utmp(4,k)
372:                u51k = tmp * utmp(5,k)
373: 
374:                tmp = utmp(6,k-1)
375: 
376:                u21km1 = tmp * utmp(2,k-1)
377:                u31km1 = tmp * utmp(3,k-1)
378:                u41km1 = tmp * utmp(4,k-1)
379:                u51km1 = tmp * utmp(5,k-1)
380: 
381:                flux(2,k) = tz3 * ( u21k - u21km1 )
382:                flux(3,k) = tz3 * ( u31k - u31km1 )
383:                flux(4,k) = (4.0d+00/3.0d+00) * tz3 * (u41k-u41km1)
[...]
389:      &              + c1 * c5 * tz3 * ( u51k - u51km1 )
390:             end do
391: 
392:             do k = 2, nz - 1
393:                rtmp(1,k) = rtmp(1,k)  &
394:      &              + dz1 * tz1 * (            utmp(1,k-1)  &
395:      &                             - 2.0d+00 * utmp(1,k)  &
396:      &                             +           utmp(1,k+1) )
397:                rtmp(2,k) = rtmp(2,k)  &
398:      &          + tz3 * c3 * c4 * ( flux(2,k+1) - flux(2,k) )  &
399:      &              + dz2 * tz1 * (            utmp(2,k-1)  &
400:      &                             - 2.0d+00 * utmp(2,k)  &
401:      &                             +           utmp(2,k+1) )
402:                rtmp(3,k) = rtmp(3,k)  &
403:      &          + tz3 * c3 * c4 * ( flux(3,k+1) - flux(3,k) )  &
404:      &              + dz3 * tz1 * (            utmp(3,k-1)  &
405:      &                             - 2.0d+00 * utmp(3,k)  &
406:      &                             +           utmp(3,k+1) )
407:                rtmp(4,k) = rtmp(4,k)  &
408:      &          + tz3 * c3 * c4 * ( flux(4,k+1) - flux(4,k) )  &
409:      &              + dz4 * tz1 * (            utmp(4,k-1)  &
410:      &                             - 2.0d+00 * utmp(4,k)  &
411:      &                             +           utmp(4,k+1) )
412:                rtmp(5,k) = rtmp(5,k)  &
413:      &          + tz3 * c3 * c4 * ( flux(5,k+1) - flux(5,k) )  &
414:      &              + dz5 * tz1 * (            utmp(5,k-1)  &
415:      &                             - 2.0d+00 * utmp(5,k)  &
416:      &                             +           utmp(5,k+1) )
[...]
426:      &                      +           utmp(m,4) )
427:                rsd(m,i,j,3) = rtmp(m,3)  &
428:      &           - dssp * ( - 4.0d+00 * utmp(m,2)  &
429:      &                      + 6.0d+00 * utmp(m,3)  &
430:      &                      - 4.0d+00 * utmp(m,4)  &
431:      &                      +           utmp(m,5) )
432:             end do
433: 
434:             do k = 4, nz - 3
[...]
441:      &                        +           utmp(m,k+2) )
[...]
450:      &                      - 4.0d+00 * utmp(m,nz-1)  )
451:                rsd(m,i,j,nz-1) = rtmp(m,nz-1)  &
452:      &           - dssp * (             utmp(m,nz-3)  &
453:      &                      - 4.0d+00 * utmp(m,nz-2)  &
454:      &                      + 5.0d+00 * utmp(m,nz-1) )
455:             end do
456:          end do
457:       end do
458: !$OMP END DO nowait
459: !$OMP MASTER
460:       if (timeron) call timer_stop(t_rhsz)
