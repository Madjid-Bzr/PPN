/users/user2222/NPB3.4.1-MZ/NPB3.4-MZ-OMP/LU-MZ/jacu.f90: 38 - 355
--------------------------------------------------------------------------------

38:             do i = nx-1, 2, -1
39: 
40: !---------------------------------------------------------------------
41: !   form the block daigonal
42: !---------------------------------------------------------------------
43:                tmp1 = rho_i(i,j,k)
44:                tmp2 = tmp1 * tmp1
45:                tmp3 = tmp1 * tmp2
46: 
47:                d(1,1,i,j) =  1.0d0  &
48:      &                       + dt * 2.0d0 * (   tx1 * dx1  &
49:      &                                          + ty1 * dy1  &
50:      &                                          + tz1 * dz1 )
51:                d(1,2,i,j) =  0.0d0
52:                d(1,3,i,j) =  0.0d0
53:                d(1,4,i,j) =  0.0d0
54:                d(1,5,i,j) =  0.0d0
55: 
56:                d(2,1,i,j) =  dt * 2.0d0  &
57:      &           * ( - tx1 * r43 - ty1 - tz1 )  &
58:      &           * ( c34 * tmp2 * u(2,i,j,k) )
[...]
64:      &                             + tz1 * dz2  )
65:                d(2,3,i,j) = 0.0d0
66:                d(2,4,i,j) = 0.0d0
67:                d(2,5,i,j) = 0.0d0
68: 
69:                d(3,1,i,j) = dt * 2.0d0  &
70:      &           * ( - tx1 - ty1 * r43 - tz1 )  &
71:      &           * ( c34 * tmp2 * u(3,i,j,k) )
72:                d(3,2,i,j) = 0.0d0
[...]
78:      &                           + tz1 * dz3 )
79:                d(3,4,i,j) = 0.0d0
80:                d(3,5,i,j) = 0.0d0
81: 
82:                d(4,1,i,j) = dt * 2.0d0  &
83:      &           * ( - tx1 - ty1 - tz1 * r43 )  &
84:      &           * ( c34 * tmp2 * u(4,i,j,k) )
85:                d(4,2,i,j) = 0.0d0
86:                d(4,3,i,j) = 0.0d0
[...]
92:      &                           + tz1 * dz4 )
93:                d(4,5,i,j) = 0.0d0
[...]
106:      &   + ( tx1 + ty1 + tz1 ) * c1345 * tmp2 * u(5,i,j,k) )
107: 
108:                d(5,2,i,j) = dt * 2.0d0  &
109:      & * ( tx1 * ( r43*c34 - c1345 )  &
110:      &   + ty1 * (     c34 - c1345 )  &
111:      &   + tz1 * (     c34 - c1345 ) ) * tmp2 * u(2,i,j,k)
112:                d(5,3,i,j) = dt * 2.0d0  &
113:      & * ( tx1 * ( c34 - c1345 )  &
114:      &   + ty1 * ( r43*c34 -c1345 )  &
115:      &   + tz1 * ( c34 - c1345 ) ) * tmp2 * u(3,i,j,k)
116:                d(5,4,i,j) = dt * 2.0d0  &
117:      & * ( tx1 * ( c34 - c1345 )  &
118:      &   + ty1 * ( c34 - c1345 )  &
119:      &   + tz1 * ( r43*c34 - c1345 ) ) * tmp2 * u(4,i,j,k)
120:                d(5,5,i,j) = 1.0d0  &
121:      &   + dt * 2.0d0 * ( tx1 + ty1 + tz1 ) * c1345 * tmp1  &
122:      &   + dt * 2.0d0 * (  tx1 * dx5  &
123:      &                    +  ty1 * dy5  &
124:      &                    +  tz1 * dz5 )
125: 
126: !---------------------------------------------------------------------
127: !   form the first block sub-diagonal
128: !---------------------------------------------------------------------
129:                tmp1 = rho_i(i+1,j,k)
130:                tmp2 = tmp1 * tmp1
131:                tmp3 = tmp1 * tmp2
132: 
133:                a(1,1,i,j) = - dt * tx1 * dx1
134:                a(1,2,i,j) =   dt * tx2
135:                a(1,3,i,j) =   0.0d0
136:                a(1,4,i,j) =   0.0d0
137:                a(1,5,i,j) =   0.0d0
138: 
139:                a(2,1,i,j) =  dt * tx2  &
140:      &          * ( - ( u(2,i+1,j,k) * tmp1 ) ** 2  &
141:      &     + c2 * qs(i+1,j,k) * tmp1 )  &
142:      &          - dt * tx1 * ( - r43 * c34 * tmp2 * u(2,i+1,j,k) )
143:                a(2,2,i,j) =  dt * tx2  &
144:      &          * ( ( 2.0d0 - c2 ) * ( u(2,i+1,j,k) * tmp1 ) )  &
145:      &          - dt * tx1 * ( r43 * c34 * tmp1 )  &
146:      &          - dt * tx1 * dx2
147:                a(2,3,i,j) =  dt * tx2  &
148:      &              * ( - c2 * ( u(3,i+1,j,k) * tmp1 ) )
149:                a(2,4,i,j) =  dt * tx2  &
150:      &              * ( - c2 * ( u(4,i+1,j,k) * tmp1 ) )
151:                a(2,5,i,j) =  dt * tx2 * c2 
152: 
153:                a(3,1,i,j) =  dt * tx2  &
154:      &              * ( - ( u(2,i+1,j,k) * u(3,i+1,j,k) ) * tmp2 )  &
155:      &         - dt * tx1 * ( - c34 * tmp2 * u(3,i+1,j,k) )
156:                a(3,2,i,j) =  dt * tx2 * ( u(3,i+1,j,k) * tmp1 )
157:                a(3,3,i,j) =  dt * tx2 * ( u(2,i+1,j,k) * tmp1 )  &
158:      &          - dt * tx1 * ( c34 * tmp1 )  &
159:      &          - dt * tx1 * dx3
160:                a(3,4,i,j) = 0.0d0
161:                a(3,5,i,j) = 0.0d0
162: 
163:                a(4,1,i,j) = dt * tx2  &
164:      &          * ( - ( u(2,i+1,j,k)*u(4,i+1,j,k) ) * tmp2 )  &
165:      &          - dt * tx1 * ( - c34 * tmp2 * u(4,i+1,j,k) )
166:                a(4,2,i,j) = dt * tx2 * ( u(4,i+1,j,k) * tmp1 )
167:                a(4,3,i,j) = 0.0d0
168:                a(4,4,i,j) = dt * tx2 * ( u(2,i+1,j,k) * tmp1 )  &
169:      &          - dt * tx1 * ( c34 * tmp1 )  &
170:      &          - dt * tx1 * dx4
171:                a(4,5,i,j) = 0.0d0
[...]
181:      &              - c1345 * tmp2 * u(5,i+1,j,k) )
[...]
188:      &           * ( r43*c34 - c1345 ) * tmp2 * u(2,i+1,j,k)
189:                a(5,3,i,j) = dt * tx2  &
190:      &           * ( - c2 * ( u(3,i+1,j,k)*u(2,i+1,j,k) ) * tmp2 )  &
191:      &           - dt * tx1  &
192:      &           * (  c34 - c1345 ) * tmp2 * u(3,i+1,j,k)
193:                a(5,4,i,j) = dt * tx2  &
194:      &           * ( - c2 * ( u(4,i+1,j,k)*u(2,i+1,j,k) ) * tmp2 )  &
195:      &           - dt * tx1  &
196:      &           * (  c34 - c1345 ) * tmp2 * u(4,i+1,j,k)
197:                a(5,5,i,j) = dt * tx2  &
198:      &           * ( c1 * ( u(2,i+1,j,k) * tmp1 ) )  &
199:      &           - dt * tx1 * c1345 * tmp1  &
200:      &           - dt * tx1 * dx5
201: 
202: !---------------------------------------------------------------------
203: !   form the second block sub-diagonal
204: !---------------------------------------------------------------------
205:                tmp1 = rho_i(i,j+1,k)
206:                tmp2 = tmp1 * tmp1
207:                tmp3 = tmp1 * tmp2
208: 
209:                b(1,1,i,j) = - dt * ty1 * dy1
210:                b(1,2,i,j) =   0.0d0
211:                b(1,3,i,j) =  dt * ty2
212:                b(1,4,i,j) =   0.0d0
213:                b(1,5,i,j) =   0.0d0
214: 
215:                b(2,1,i,j) =  dt * ty2  &
216:      &           * ( - ( u(2,i,j+1,k)*u(3,i,j+1,k) ) * tmp2 )  &
217:      &           - dt * ty1 * ( - c34 * tmp2 * u(2,i,j+1,k) )
218:                b(2,2,i,j) =  dt * ty2 * ( u(3,i,j+1,k) * tmp1 )  &
219:      &          - dt * ty1 * ( c34 * tmp1 )  &
220:      &          - dt * ty1 * dy2
221:                b(2,3,i,j) =  dt * ty2 * ( u(2,i,j+1,k) * tmp1 )
222:                b(2,4,i,j) = 0.0d0
223:                b(2,5,i,j) = 0.0d0
224: 
225:                b(3,1,i,j) =  dt * ty2  &
226:      &           * ( - ( u(3,i,j+1,k) * tmp1 ) ** 2  &
227:      &      + c2 * ( qs(i,j+1,k) * tmp1 ) )  &
228:      &       - dt * ty1 * ( - r43 * c34 * tmp2 * u(3,i,j+1,k) )
229:                b(3,2,i,j) =  dt * ty2  &
230:      &                   * ( - c2 * ( u(2,i,j+1,k) * tmp1 ) )
231:                b(3,3,i,j) =  dt * ty2 * ( ( 2.0d0 - c2 )  &
232:      &                   * ( u(3,i,j+1,k) * tmp1 ) )  &
233:      &       - dt * ty1 * ( r43 * c34 * tmp1 )  &
234:      &       - dt * ty1 * dy3
235:                b(3,4,i,j) =  dt * ty2  &
236:      &                   * ( - c2 * ( u(4,i,j+1,k) * tmp1 ) )
237:                b(3,5,i,j) =  dt * ty2 * c2
238: 
239:                b(4,1,i,j) =  dt * ty2  &
240:      &              * ( - ( u(3,i,j+1,k)*u(4,i,j+1,k) ) * tmp2 )  &
241:      &       - dt * ty1 * ( - c34 * tmp2 * u(4,i,j+1,k) )
242:                b(4,2,i,j) = 0.0d0
243:                b(4,3,i,j) =  dt * ty2 * ( u(4,i,j+1,k) * tmp1 )
244:                b(4,4,i,j) =  dt * ty2 * ( u(3,i,j+1,k) * tmp1 )  &
245:      &                        - dt * ty1 * ( c34 * tmp1 )  &
246:      &                        - dt * ty1 * dy4
247:                b(4,5,i,j) = 0.0d0
[...]
257:      &              - c1345*tmp2*u(5,i,j+1,k) )
258:                b(5,2,i,j) =  dt * ty2  &
259:      &          * ( - c2 * ( u(2,i,j+1,k)*u(3,i,j+1,k) ) * tmp2 )  &
260:      &          - dt * ty1  &
261:      &          * ( c34 - c1345 ) * tmp2 * u(2,i,j+1,k)
[...]
268:      &          * ( r43*c34 - c1345 ) * tmp2 * u(3,i,j+1,k)
269:                b(5,4,i,j) =  dt * ty2  &
270:      &          * ( - c2 * ( u(3,i,j+1,k)*u(4,i,j+1,k) ) * tmp2 )  &
271:      &          - dt * ty1 * ( c34 - c1345 ) * tmp2 * u(4,i,j+1,k)
272:                b(5,5,i,j) =  dt * ty2  &
273:      &          * ( c1 * ( u(3,i,j+1,k) * tmp1 ) )  &
274:      &          - dt * ty1 * c1345 * tmp1  &
275:      &          - dt * ty1 * dy5
276: 
277: !---------------------------------------------------------------------
278: !   form the third block sub-diagonal
279: !---------------------------------------------------------------------
280:                tmp1 = rho_i(i,j,k+1)
281:                tmp2 = tmp1 * tmp1
282:                tmp3 = tmp1 * tmp2
283: 
284:                c(1,1,i,j) = - dt * tz1 * dz1
285:                c(1,2,i,j) =   0.0d0
286:                c(1,3,i,j) =   0.0d0
287:                c(1,4,i,j) = dt * tz2
288:                c(1,5,i,j) =   0.0d0
289: 
290:                c(2,1,i,j) = dt * tz2  &
291:      &           * ( - ( u(2,i,j,k+1)*u(4,i,j,k+1) ) * tmp2 )  &
292:      &           - dt * tz1 * ( - c34 * tmp2 * u(2,i,j,k+1) )
293:                c(2,2,i,j) = dt * tz2 * ( u(4,i,j,k+1) * tmp1 )  &
294:      &           - dt * tz1 * c34 * tmp1  &
295:      &           - dt * tz1 * dz2 
296:                c(2,3,i,j) = 0.0d0
297:                c(2,4,i,j) = dt * tz2 * ( u(2,i,j,k+1) * tmp1 )
298:                c(2,5,i,j) = 0.0d0
299: 
300:                c(3,1,i,j) = dt * tz2  &
301:      &           * ( - ( u(3,i,j,k+1)*u(4,i,j,k+1) ) * tmp2 )  &
302:      &           - dt * tz1 * ( - c34 * tmp2 * u(3,i,j,k+1) )
303:                c(3,2,i,j) = 0.0d0
304:                c(3,3,i,j) = dt * tz2 * ( u(4,i,j,k+1) * tmp1 )  &
305:      &           - dt * tz1 * ( c34 * tmp1 )  &
306:      &           - dt * tz1 * dz3
307:                c(3,4,i,j) = dt * tz2 * ( u(3,i,j,k+1) * tmp1 )
308:                c(3,5,i,j) = 0.0d0
309: 
310:                c(4,1,i,j) = dt * tz2  &
311:      &        * ( - ( u(4,i,j,k+1) * tmp1 ) ** 2  &
312:      &            + c2 * ( qs(i,j,k+1) * tmp1 ) )  &
313:      &        - dt * tz1 * ( - r43 * c34 * tmp2 * u(4,i,j,k+1) )
314:                c(4,2,i,j) = dt * tz2  &
315:      &             * ( - c2 * ( u(2,i,j,k+1) * tmp1 ) )
316:                c(4,3,i,j) = dt * tz2  &
317:      &             * ( - c2 * ( u(3,i,j,k+1) * tmp1 ) )
318:                c(4,4,i,j) = dt * tz2 * ( 2.0d0 - c2 )  &
319:      &             * ( u(4,i,j,k+1) * tmp1 )  &
320:      &             - dt * tz1 * ( r43 * c34 * tmp1 )  &
321:      &             - dt * tz1 * dz4
322:                c(4,5,i,j) = dt * tz2 * c2
[...]
332:      &          - c1345 * tmp2 * u(5,i,j,k+1) )
333:                c(5,2,i,j) = dt * tz2  &
334:      &       * ( - c2 * ( u(2,i,j,k+1)*u(4,i,j,k+1) ) * tmp2 )  &
335:      &       - dt * tz1 * ( c34 - c1345 ) * tmp2 * u(2,i,j,k+1)
336:                c(5,3,i,j) = dt * tz2  &
337:      &       * ( - c2 * ( u(3,i,j,k+1)*u(4,i,j,k+1) ) * tmp2 )  &
338:      &       - dt * tz1 * ( c34 - c1345 ) * tmp2 * u(3,i,j,k+1)
[...]
344:      &       - dt * tz1 * ( r43*c34 - c1345 ) * tmp2 * u(4,i,j,k+1)
345:                c(5,5,i,j) = dt * tz2  &
346:      &       * ( c1 * ( u(4,i,j,k+1) * tmp1 ) )  &
347:      &       - dt * tz1 * c1345 * tmp1  &
348:      &       - dt * tz1 * dz5
[...]
355:       end
