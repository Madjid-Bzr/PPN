_cqa_text_report = {
  paths = {
    {
      hint = {
        {
          details = "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 5 occurrences\n",
          title = "CALL instructions",
          txt = "Detected function call instructions.\n",
        },
        {
          workaround = "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements.",
          details = " - CLTQ: 1 occurrences\n",
          title = "Conversion instructions",
          txt = "Detected expensive conversion instructions.",
        },
        {
          title = "Type of elements and instruction set",
          txt = "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements.",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 106 bytes.\nThe binary function is storing 64 bytes.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 162\nloop length        : 629\nused x86 registers : 16\nused mmx registers : 0\nused xmm registers : 0\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 10\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\ninstruction fetch    : 40.00 cycles\ninstruction queue    : 81.00 cycles\ndecoding             : 81.00 cycles\nmicro-operation queue: 87.00 cycles\nfront end            : 87.00 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1   | P2    | P3    | P4    | P5    | P6\n-------------------------------------------------------------\nuops   | 54.50 | 0.00 | 22.00 | 18.00 | 63.50 | 63.00 | 18.00\ncycles | 54.50 | 0.00 | 22.00 | 18.00 | 63.50 | 63.00 | 18.00\n\nCycles executing div or sqrt instructions: 44.00-52.00\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 87.00\nDispatch  : 63.50\nDIV/SQRT  : 44.00-52.00\nOverall L1: 87.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "all     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 0%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "all     : 7%\nload    : 3%\nstore   : 8%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 6%\nother   : 7%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 87.00 cycles. At this rate:\n - 0% of peak load performance is reached (1.22 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 1% of peak store performance is reached (0.74 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 87.00 to 81.00 cycles (1.07x speedup).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 16c20\n\nInstruction                    | Nb FU | P0    | P1 | P2   | P3   | P4    | P5   | P6 | Latency | Recip. throughput\n-------------------------------------------------------------------------------------------------------------------\nPUSH %RBP                      | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nMOV %RSP,%RBP                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nPUSH %R15                      | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R14                      | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nLEA (%RSI),%R14                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nPUSH %R13                      | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R12                      | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %RBX                      | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nAND $-0x20,%RSP                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA -0x240(%RSP),%RSP          | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV (%RCX),%EAX                | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nXOR %ECX,%ECX\nMOV (%R8),%EBX                 | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV (%RDX),%R10D               | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV (%R9),%R8D                 | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nSUB $0x1,%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCLTQ\nMOV $-0x6,%R9                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x5(%RAX,%RAX,4),%R13      | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nLEA (%R10),%R11D               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x18(%RBP),%R15            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %R13,%R13                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x10(%RBP),%RSI            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCMOVS %RCX,%R13                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 2       | 1\nSUB $0x1,%EBX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOVSXD %EBX,%RBX               | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nADD $0x1,%RBX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %R13,%RBX                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nTEST %RBX,%RBX                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMOVS %RCX,%RBX                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 2       | 1\nSUB $0x2,%R11D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOVSXD %R11D,%RDX              | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nMOV %RDX,%R12                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nSAL $0x2,%R12                  | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nADD %RDX,%R12                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMOVS %RCX,%R12                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 2       | 1\nSUB $0x2,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV (%RSI),%ECX                | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nSUB %R12,%R9                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMPW $0x6e69,(%R15)            | 1     | 0     | 0  | 1    | 0    | 0.50  | 0.50 | 0  | 1       | 1\nJNE 16fd9 <copy_y_face_+0x3b9> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV %RDI,0x10(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %ECX,0x20(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R8D,0x24(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R11D,0x28(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R10D,0x2c(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R9,0x18(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCALL 2060 <@plt_start@+0x40>   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nLEA (%RAX),%R15D               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 2120 <@plt_start@+0x100>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x2c(%RSP),%R10D           | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA (%RAX),%R8D                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x24(%RSP),%EAX            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x28(%RSP),%R11D           | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x18(%RSP),%RCX            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOVSXD 0x20(%RSP),%RSI         | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %EAX,%EDX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nSAR $0x1f,%EDX                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nIDIV %R15D                     | 29    | 14.50 | 0  | 0    | 0    | 14.50 | 0    | 0  | 37-49   | 22-26\nMOV 0x10(%RSP),%RDI            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCMP %EDX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJL 17348 <copy_y_face_+0x728>  | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nIMUL %EAX,%R8D                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %EDX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %R8D,%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMP %EAX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 16fc5 <copy_y_face_+0x3a5> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nIMUL %RSI,%R13                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nTEST %R11D,%R11D               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x1(%R8),%R8D              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJLE 16fc5 <copy_y_face_+0x3a5> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOVSXD %R8D,%R15               | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nLEA (%RBX),%R9                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %R15,%R9                  | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nLEA (%R13),%RSI                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSUB $0x1,%RSI                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA -0x3(%R10),%R13D           | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%R13,%R13,4),%R10         | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%RCX,%R10,1),%RDX         | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x1(%R13),%RCX             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %R9,%RSI                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (,%R12,8),%R9              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %R15,%R12                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nLEA (%RDX),%R11                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %R12,%R11                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x30(%RDI),%R12            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL $-0x28,%RCX,%RDI          | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nLEA 0x58(%R14,%R11,8),%RDX     | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nLEA 0x1(%RAX),%R14D            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nNOPW %CS:(%RAX,%RAX,1)         | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nXCHG %AX,%AX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nCALL 21b0 <@plt_start@+0x190>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nLEA -0x28(%RBP),%RSP           | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nPOP %RBX                       | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R12                       | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R13                       | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R14                       | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R15                       | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %RBP                       | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nRET\nMOVZX 0x16e10(%RIP),%EAX       | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCMP %AX,(%R15)                 | 1     | 0     | 0  | 1    | 0    | 0.50  | 0.50 | 0  | 1       | 1\nJE 1704c <copy_y_face_+0x42c>  | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV %RDI,0x10(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %ECX,0x20(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R9,0x18(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R8D,0x24(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R11D,0x28(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R10D,0x2c(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCALL 2060 <@plt_start@+0x40>   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nLEA (%RAX),%R15D               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 2120 <@plt_start@+0x100>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x2c(%RSP),%R10D           | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA (%RAX),%R8D                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x24(%RSP),%EAX            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x28(%RSP),%R11D           | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x18(%RSP),%RCX            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOVSXD 0x20(%RSP),%R9          | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %EAX,%EDX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nSAR $0x1f,%EDX                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nIDIV %R15D                     | 29    | 14.50 | 0  | 0    | 0    | 14.50 | 0    | 0  | 37-49   | 22-26\nMOV 0x10(%RSP),%RDI            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCMP %EDX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJL 17365 <copy_y_face_+0x745>  | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nIMUL %EAX,%R8D                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %EDX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %R8D,%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMP %EAX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 16fc5 <copy_y_face_+0x3a5> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nIMUL %R9,%R13                  | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nTEST %R11D,%R11D               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x1(%R8),%R8D              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJLE 16fc5 <copy_y_face_+0x3a5> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOVSXD %R8D,%RSI               | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nLEA (%R12),%R9                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %RSI,%R9                  | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nLEA (,%RBX,8),%R15             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA -0x3(%R10),%R10D           | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x30(%R14),%R14            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %RSI,%RBX                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nLEA -0x1(%R10,%R10,4),%R11     | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nLEA (%R13,%R11,1),%R13         | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x1(%RAX),%ESI             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %RCX,%R9                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x1(%R10),%RCX             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %R13,%RBX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x58(%RDI,%RBX,8),%RDI     | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nIMUL $-0x28,%RCX,%RBX          | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nNOPW (%RAX,%RAX,1)             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nJMP 16fc5 <copy_y_face_+0x3a5> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nLEA 0x1(%RAX),%EAX             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nXOR %EDX,%EDX\nIMUL %EAX,%R8D                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %EDX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %R8D,%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMP %EAX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 16fc5 <copy_y_face_+0x3a5> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nJMP 16d19 <copy_y_face_+0xf9>  | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nLEA 0x1(%RAX),%EAX             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nXOR %EDX,%EDX\nJMP 170b4 <copy_y_face_+0x494> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nNOP                            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\n",
        },
      },
      header = {
        "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
        "0% of peak computational performance is used (0.00 out of 4.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\ndo i a(i)%x = b(i)%x (slow, non stride 1) => do i a%x(i) = b%x(i) (fast, stride 1)\n",
          details = "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is not vectorized.\nOnly 7% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 87.00 to 3.34 cycles (26.05x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
      },
    },
  },
  AVG = {
      hint = {
        {
          details = "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 5 occurrences\n",
          title = "CALL instructions",
          txt = "Detected function call instructions.\n",
        },
        {
          workaround = "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements.",
          details = " - CLTQ: 1 occurrences\n",
          title = "Conversion instructions",
          txt = "Detected expensive conversion instructions.",
        },
        {
          title = "Type of elements and instruction set",
          txt = "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements.",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 106 bytes.\nThe binary function is storing 64 bytes.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 162\nloop length        : 629\nused x86 registers : 16\nused mmx registers : 0\nused xmm registers : 0\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 10\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\ninstruction fetch    : 40.00 cycles\ninstruction queue    : 81.00 cycles\ndecoding             : 81.00 cycles\nmicro-operation queue: 87.00 cycles\nfront end            : 87.00 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1   | P2    | P3    | P4    | P5    | P6\n-------------------------------------------------------------\nuops   | 54.50 | 0.00 | 22.00 | 18.00 | 63.50 | 63.00 | 18.00\ncycles | 54.50 | 0.00 | 22.00 | 18.00 | 63.50 | 63.00 | 18.00\n\nCycles executing div or sqrt instructions: 44.00-52.00\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 87.00\nDispatch  : 63.50\nDIV/SQRT  : 44.00-52.00\nOverall L1: 87.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "all     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 0%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "all     : 7%\nload    : 3%\nstore   : 8%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 6%\nother   : 7%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 87.00 cycles. At this rate:\n - 0% of peak load performance is reached (1.22 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 1% of peak store performance is reached (0.74 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 87.00 to 81.00 cycles (1.07x speedup).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 16c20\n\nInstruction                    | Nb FU | P0    | P1 | P2   | P3   | P4    | P5   | P6 | Latency | Recip. throughput\n-------------------------------------------------------------------------------------------------------------------\nPUSH %RBP                      | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nMOV %RSP,%RBP                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nPUSH %R15                      | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R14                      | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nLEA (%RSI),%R14                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nPUSH %R13                      | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R12                      | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %RBX                      | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nAND $-0x20,%RSP                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA -0x240(%RSP),%RSP          | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV (%RCX),%EAX                | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nXOR %ECX,%ECX\nMOV (%R8),%EBX                 | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV (%RDX),%R10D               | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV (%R9),%R8D                 | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nSUB $0x1,%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCLTQ\nMOV $-0x6,%R9                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x5(%RAX,%RAX,4),%R13      | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nLEA (%R10),%R11D               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x18(%RBP),%R15            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %R13,%R13                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x10(%RBP),%RSI            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCMOVS %RCX,%R13                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 2       | 1\nSUB $0x1,%EBX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOVSXD %EBX,%RBX               | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nADD $0x1,%RBX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %R13,%RBX                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nTEST %RBX,%RBX                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMOVS %RCX,%RBX                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 2       | 1\nSUB $0x2,%R11D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOVSXD %R11D,%RDX              | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nMOV %RDX,%R12                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nSAL $0x2,%R12                  | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nADD %RDX,%R12                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMOVS %RCX,%R12                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 2       | 1\nSUB $0x2,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV (%RSI),%ECX                | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nSUB %R12,%R9                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMPW $0x6e69,(%R15)            | 1     | 0     | 0  | 1    | 0    | 0.50  | 0.50 | 0  | 1       | 1\nJNE 16fd9 <copy_y_face_+0x3b9> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV %RDI,0x10(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %ECX,0x20(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R8D,0x24(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R11D,0x28(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R10D,0x2c(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R9,0x18(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCALL 2060 <@plt_start@+0x40>   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nLEA (%RAX),%R15D               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 2120 <@plt_start@+0x100>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x2c(%RSP),%R10D           | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA (%RAX),%R8D                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x24(%RSP),%EAX            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x28(%RSP),%R11D           | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x18(%RSP),%RCX            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOVSXD 0x20(%RSP),%RSI         | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %EAX,%EDX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nSAR $0x1f,%EDX                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nIDIV %R15D                     | 29    | 14.50 | 0  | 0    | 0    | 14.50 | 0    | 0  | 37-49   | 22-26\nMOV 0x10(%RSP),%RDI            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCMP %EDX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJL 17348 <copy_y_face_+0x728>  | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nIMUL %EAX,%R8D                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %EDX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %R8D,%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMP %EAX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 16fc5 <copy_y_face_+0x3a5> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nIMUL %RSI,%R13                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nTEST %R11D,%R11D               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x1(%R8),%R8D              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJLE 16fc5 <copy_y_face_+0x3a5> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOVSXD %R8D,%R15               | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nLEA (%RBX),%R9                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %R15,%R9                  | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nLEA (%R13),%RSI                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSUB $0x1,%RSI                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA -0x3(%R10),%R13D           | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%R13,%R13,4),%R10         | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%RCX,%R10,1),%RDX         | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x1(%R13),%RCX             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %R9,%RSI                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (,%R12,8),%R9              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %R15,%R12                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nLEA (%RDX),%R11                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %R12,%R11                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x30(%RDI),%R12            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL $-0x28,%RCX,%RDI          | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nLEA 0x58(%R14,%R11,8),%RDX     | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nLEA 0x1(%RAX),%R14D            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nNOPW %CS:(%RAX,%RAX,1)         | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nXCHG %AX,%AX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nCALL 21b0 <@plt_start@+0x190>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nLEA -0x28(%RBP),%RSP           | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nPOP %RBX                       | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R12                       | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R13                       | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R14                       | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R15                       | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %RBP                       | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nRET\nMOVZX 0x16e10(%RIP),%EAX       | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCMP %AX,(%R15)                 | 1     | 0     | 0  | 1    | 0    | 0.50  | 0.50 | 0  | 1       | 1\nJE 1704c <copy_y_face_+0x42c>  | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV %RDI,0x10(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %ECX,0x20(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R9,0x18(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R8D,0x24(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R11D,0x28(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R10D,0x2c(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCALL 2060 <@plt_start@+0x40>   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nLEA (%RAX),%R15D               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 2120 <@plt_start@+0x100>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x2c(%RSP),%R10D           | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA (%RAX),%R8D                | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x24(%RSP),%EAX            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x28(%RSP),%R11D           | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x18(%RSP),%RCX            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOVSXD 0x20(%RSP),%R9          | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %EAX,%EDX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nSAR $0x1f,%EDX                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nIDIV %R15D                     | 29    | 14.50 | 0  | 0    | 0    | 14.50 | 0    | 0  | 37-49   | 22-26\nMOV 0x10(%RSP),%RDI            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCMP %EDX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJL 17365 <copy_y_face_+0x745>  | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nIMUL %EAX,%R8D                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %EDX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %R8D,%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMP %EAX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 16fc5 <copy_y_face_+0x3a5> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nIMUL %R9,%R13                  | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nTEST %R11D,%R11D               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x1(%R8),%R8D              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJLE 16fc5 <copy_y_face_+0x3a5> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOVSXD %R8D,%RSI               | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nLEA (%R12),%R9                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %RSI,%R9                  | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nLEA (,%RBX,8),%R15             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA -0x3(%R10),%R10D           | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x30(%R14),%R14            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %RSI,%RBX                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nLEA -0x1(%R10,%R10,4),%R11     | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nLEA (%R13,%R11,1),%R13         | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x1(%RAX),%ESI             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %RCX,%R9                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x1(%R10),%RCX             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %R13,%RBX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x58(%RDI,%RBX,8),%RDI     | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nIMUL $-0x28,%RCX,%RBX          | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 5       | 2\nNOPW (%RAX,%RAX,1)             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nJMP 16fc5 <copy_y_face_+0x3a5> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nLEA 0x1(%RAX),%EAX             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nXOR %EDX,%EDX\nIMUL %EAX,%R8D                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %EDX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %R8D,%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMP %EAX,%R8D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 16fc5 <copy_y_face_+0x3a5> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nJMP 16d19 <copy_y_face_+0xf9>  | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nLEA 0x1(%RAX),%EAX             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nXOR %EDX,%EDX\nJMP 170b4 <copy_y_face_+0x494> | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nNOP                            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\n",
        },
      },
      header = {
        "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
        "0% of peak computational performance is used (0.00 out of 4.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\ndo i a(i)%x = b(i)%x (slow, non stride 1) => do i a%x(i) = b%x(i) (fast, stride 1)\n",
          details = "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is not vectorized.\nOnly 7% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 87.00 to 3.34 cycles (26.05x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
      },
    },
  common = {
    header = {
      "The function is defined in /users/user2222/NPB3.4.1-MZ/NPB3.4-MZ-OMP/LU-MZ/exch_qbc.f90:96,104-120,126-131.\n",
      "Warnings:\nIgnoring paths for analysis",
    },
  },
}
