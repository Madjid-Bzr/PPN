_cqa_text_report = {
  paths = {
    {
      hint = {
        {
          details = "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - sync_init: 1 occurrences\n - timer_start: 2 occurrences\n - timer_stop: 1 occurrences\n - unknown: 6 occurrences\n",
          title = "CALL instructions",
          txt = "Detected function call instructions.\n",
        },
        {
          workaround = "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements.",
          details = " - CLTQ: 1 occurrences\n",
          title = "Conversion instructions",
          txt = "Detected expensive conversion instructions.",
        },
        {
          title = "Type of elements and instruction set",
          txt = "3 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function is composed of 3 FP arithmetical operations:\n - 1: addition or subtraction\n - 1: multiply\n - 1: divide\nThe binary function is loading 336 bytes (42 double precision FP elements).\nThe binary function is storing 232 bytes (29 double precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.01 FP operations per loaded or stored byte.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 233\nloop length        : 1159\nused x86 registers : 16\nused mmx registers : 0\nused xmm registers : 7\nused ymm registers : 0\nused zmm registers : 1\nnb stack references: 26\nADD-SUB / MUL ratio: 1.00\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\ninstruction fetch    : 73.00 cycles\ninstruction queue    : 116.50 cycles\ndecoding             : 116.50 cycles\nmicro-operation queue: 125.00 cycles\nfront end            : 125.00 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1   | P2    | P3    | P4    | P5    | P6\n-------------------------------------------------------------\nuops   | 54.50 | 2.00 | 49.50 | 49.50 | 69.50 | 69.00 | 50.00\ncycles | 54.50 | 2.00 | 49.50 | 49.50 | 69.50 | 69.00 | 50.00\n\nCycles executing div or sqrt instructions: 56.00-84.00\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 125.00\nDispatch  : 69.50\nDIV/SQRT  : 56.00-84.00\nOverall L1: 125.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 0%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 0%\nINT+FP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 0%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 8%\nload   : 10%\nstore  : 9%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 10%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 6%\nFP\nall     : 12%\nload    : 12%\nstore   : 12%\nmul     : 12%\nadd-sub : 12%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 12%\nother   : 12%\nINT+FP\nall     : 9%\nload    : 11%\nstore   : 9%\nmul     : 12%\nadd-sub : 11%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 8%\nother   : 6%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 125.00 cycles. At this rate:\n - 2% of peak load performance is reached (2.69 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 2% of peak store performance is reached (1.86 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 125.00 to 116.50 cycles (1.07x speedup).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 14940\n\nInstruction                        | Nb FU | P0    | P1   | P2   | P3   | P4    | P5   | P6 | Latency | Recip. throughput\n-------------------------------------------------------------------------------------------------------------------------\nPUSH %RBP                          | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nMOV %RSP,%RBP                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nPUSH %R15                          | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R14                          | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nLEA (%RDI),%R14                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nPUSH %R13                          | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R12                          | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %RBX                          | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nAND $-0x40,%RSP                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA -0x130(%RSP),%RSP              | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0xb8(%RDI),%RAX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0xb0(%RDI),%RDX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0xa8(%RDI),%RCX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x98(%RDI),%RSI                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0xa0(%RDI),%RBX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x90(%RDI),%RDI                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %RAX,0xe0(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RDX,0x88(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RCX,0x108(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RBX,0x100(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RSI,0xb0(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RDI,0x110(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCALL 2120 <@plt_start@+0x100>      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nTEST %EAX,%EAX                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%RAX),%R15D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJE 15de2 <ssor_._omp_fn.0+0x14a2>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0x80(%R14),%R8                 | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOVL $0x2,0x124(%RSP)              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOV (%R8),%EBX                     | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCMP $0x2,%EBX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJLE 14e16 <ssor_._omp_fn.0+0x4d6>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCALL 2060 <@plt_start@+0x40>       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x78(%R14),%R12                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA (%RAX),%R11D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x68(%R14),%RCX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV $0x2,%R8D                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0xb0(%RSP),%RDI                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV (%R12),%EAX                    | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %RCX,0xf8(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV 0x100(%RSP),%RCX               | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %R14,0xd8(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nSUB $0x2,%EAX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,%EDX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nSAR $0x1f,%EDX                     | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nIDIV %R11D                         | 29    | 14.50 | 0    | 0    | 0    | 14.50 | 0    | 0  | 37-49   | 22-26\nLEA (%RDI),%R11                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,%R13D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nADD $0x1,%R13D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMP %EDX,%R15D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMOVL %R13D,%EAX                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 2       | 1\nADD %R11,%R11                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %RCX,%R11                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,%R12D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nLEA (%RAX),%R13D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %R15D,%R12D                   | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 3       | 1\nCMP %EDX,%R15D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x8(%R14),%RCX                 | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA (%RDI),%R14                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%R12,%RDX,1),%R9D             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x110(%RSP),%RDX               | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCMOVGE %R9D,%R12D                  | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 2       | 1\nSUB $-0x80,%RCX                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %R12D,%EAX                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nADD %R12D,%R13D                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD $0x2,%EAX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x2(%R13),%R10D                | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,0x118(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCLTQ\nIMUL %RDX,%RAX                     | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 5       | 2\nLEA (,%RDX,8),%R9                  | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %RCX,0xe8(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RAX,0xf0(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJMP 14aad <ssor_._omp_fn.0+0x16d>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOV 0xd8(%RSP),%R14                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %R15D,%R15D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EBX,0x124(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJE 15e18 <ssor_._omp_fn.0+0x14d8>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0x88(%R14),%RCX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA 0x12c(%RSP),%R12               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x128(%RSP),%RBX               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%R12),%RDX                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%RBX),%RSI                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x18ec5(%RIP),%RDI             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 26fe0 <sync_init_>            | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nCALL 21b0 <@plt_start@+0x190>      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x80(%R14),%R13                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOVL $0x2,0x124(%RSP)              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOV (%R13),%R10D                   | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA 0x124(%RSP),%R13               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %R10D,0x118(%RSP)              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCMP $0x2,%R10D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJG 14fc6 <ssor_._omp_fn.0+0x686>   | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nJMP 15077 <ssor_._omp_fn.0+0x737>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nNOPW (%RAX,%RAX,1)                 | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nCALL 21b0 <@plt_start@+0x190>      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x80(%R14),%RSI                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA 0x124(%RSP),%R13               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV (%RSI),%ECX                    | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nSUB $0x1,%ECX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %ECX,0x124(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCMP $0x1,%ECX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJG 151f1 <ssor_._omp_fn.0+0x8b1>   | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nJMP 152a0 <ssor_._omp_fn.0+0x960>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nNOPL (%RAX)                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nCALL 21b0 <@plt_start@+0x190>      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nVMOVSD 0x1c653(%RIP),%XMM6         | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nTEST %R15D,%R15D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVMOVSD 0x18210(%RIP),%XMM7         | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVSUBSD %XMM6,%XMM7,%XMM8           | 1     | 0.50  | 0.50 | 0    | 0    | 0     | 0    | 0  | 6       | 0.50\nVMOVSD 0x18004(%RIP),%XMM10        | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVMULSD %XMM6,%XMM8,%XMM9           | 1     | 0.50  | 0.50 | 0    | 0    | 0     | 0    | 0  | 6       | 0.50\nVDIVSD %XMM9,%XMM10,%XMM11         | 3     | 1     | 0    | 0    | 0    | 0     | 0    | 0  | 40-42   | 12-32\nJNE 15e37 <ssor_._omp_fn.0+0x14f7> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0x1c48f(%RIP),%ECX             | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %ECX,%ECX                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJNE 15e63 <ssor_._omp_fn.0+0x1523> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0x80(%R14),%R13                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOVL $0x2,0x124(%RSP)              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOV (%R13),%EDI                    | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %EDI,0xc0(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCMP $0x2,%EDI                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJLE 15b0c <ssor_._omp_fn.0+0x11cc> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nVMOVSD %XMM11,0xd8(%RSP)           | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nCALL 2060 <@plt_start@+0x40>       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x78(%R14),%R9                 | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA (%RAX),%R10D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0xb0(%RSP),%RDI                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x88(%RSP),%R12                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV (%R9),%EAX                     | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x100(%RSP),%RCX               | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0xe0(%RSP),%RBX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x68(%R14),%RSI                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nSUB $0x2,%EAX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV (%R14),%R13                    | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %EAX,%EDX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nSAR $0x1f,%EDX                     | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nIDIV %R10D                         | 29    | 14.50 | 0    | 0    | 0    | 14.50 | 0    | 0  | 37-49   | 22-26\nMOV 0x8(%R14),%R14                 | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %RSI,0x50(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nVMOVSD 0xd8(%RSP),%XMM0            | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nLEA 0x58(%R14),%RSI                | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVBROADCASTSD %XMM0,%ZMM1           | 1     | 1     | 0    | 0    | 0    | 0     | 0    | 0  | 5       | 1\nMOVL $0x2,0x118(%RSP)              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOV %RSI,0xf0(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R15D,0x3c(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA (%RAX),%R8D                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD $0x1,%R8D                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMP %EDX,%R15D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMOVL %R8D,%EAX                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 2       | 1\nADD %RDI,%RCX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %R12,%RBX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %RDI,%RCX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,%R11D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nADD %R12,%RBX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %R15D,%R11D                   | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 3       | 1\nCMP %EDX,%R15D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %RBX,0xa0(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA 0x198(%R14),%RBX               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %RCX,0x98(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RBX,0xe8(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA (%RDX,%R11,1),%EDI             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x108(%RSP),%RDX               | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA (%RDI),%R10D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMOVL %R11D,%R10D                  | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 2       | 1\nLEA 0x2(%R10),%R9D                 | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%RDX),%R8                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOVSXD %R9D,%R11                   | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nADD %R10D,%EAX                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %R11,%RDX                     | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 5       | 2\nMOV %EAX,0x7c(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nSAL $0x3,%R8                       | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nLEA 0x2(%RAX),%EAX                 | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL 0x110(%RSP),%R11              | 1     | 0     | 0    | 1    | 0    | 1     | 0    | 0  | 5       | 2\nMOV %R10D,0x78(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R9D,0x70(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %EAX,0x100(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R8,0xf8(%RSP)                 | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RDX,0x48(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R11,0x40(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJMP 15461 <ssor_._omp_fn.0+0xb21>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOV 0x3c(%RSP),%R11D               | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0xc0(%RSP),%EAX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %R11D,%R11D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,0x124(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJNE 15b1a <ssor_._omp_fn.0+0x11da> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0x1bc56(%RIP),%ECX             | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %ECX,%ECX                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJNE 15e86 <ssor_._omp_fn.0+0x1546> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA -0x28(%RBP),%RSP               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nPOP %RBX                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R12                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R13                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R14                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R15                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %RBP                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nRET\nMOV 0x1b97f(%RIP),%R9D             | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %R9D,%R9D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJE 15dfa <ssor_._omp_fn.0+0x14ba>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA 0x17f23(%RIP),%RDI             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 2c9b0 <timer_start_>          | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x80(%R14),%R10                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOVL $0x2,0x124(%RSP)              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOV (%R10),%EBX                    | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCMP $0x2,%EBX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJG 149e4 <ssor_._omp_fn.0+0xa4>    | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0x1b94a(%RIP),%EBX             | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %EBX,%EBX                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJE 14e16 <ssor_._omp_fn.0+0x4d6>   | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA 0x17eeb(%RIP),%RDI             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 2c9d0 <timer_stop_>           | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nJMP 14e16 <ssor_._omp_fn.0+0x4d6>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOV 0x80(%R14),%RBX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOVL $0x2,0x124(%RSP)              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOV (%RBX),%R12D                   | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %R12D,0xc0(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCMP $0x2,%R12D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJG 15307 <ssor_._omp_fn.0+0x9c7>   | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nJMP 15b1a <ssor_._omp_fn.0+0x11da> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nVMOVSD %XMM11,0x118(%RSP)          | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nLEA 0x17e91(%RIP),%RDI             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 2c9b0 <timer_start_>          | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nVMOVSD 0x118(%RSP),%XMM11          | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nJMP 152e1 <ssor_._omp_fn.0+0x9a1>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nLEA -0x28(%RBP),%RSP               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x17e73(%RIP),%RDI             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nPOP %RBX                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R12                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R13                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R14                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R15                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %RBP                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJMP 2c9d0 <timer_stop_>            | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\n",
        },
      },
      header = {
        "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
        "0% of peak computational performance is used (0.02 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n - To reference allocatable arrays, use \"allocatable\" instead of \"pointer\" pointers or qualify them with the \"contiguous\" attribute (Fortran 2008)\n - For structures, limit to one indirection. For example, use a_b%c instead of a%b%c with a_b set to a%b before this function\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 125.00 to 32.00 cycles (3.91x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\ndo i a(i)%x = b(i)%x (slow, non stride 1) => do i a%x(i) = b%x(i) (fast, stride 1)\n",
          details = "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is not vectorized.\nOnly 9% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 125.00 to 9.12 cycles (13.71x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
        {
          workaround = "Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).",
          title = "FMA",
          txt = "Presence of both ADD/SUB and MUL operations.",
        },
      },
    },
  },
  AVG = {
      hint = {
        {
          details = "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - sync_init: 1 occurrences\n - timer_start: 2 occurrences\n - timer_stop: 1 occurrences\n - unknown: 6 occurrences\n",
          title = "CALL instructions",
          txt = "Detected function call instructions.\n",
        },
        {
          workaround = "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements.",
          details = " - CLTQ: 1 occurrences\n",
          title = "Conversion instructions",
          txt = "Detected expensive conversion instructions.",
        },
        {
          title = "Type of elements and instruction set",
          txt = "3 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function is composed of 3 FP arithmetical operations:\n - 1: addition or subtraction\n - 1: multiply\n - 1: divide\nThe binary function is loading 336 bytes (42 double precision FP elements).\nThe binary function is storing 232 bytes (29 double precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.01 FP operations per loaded or stored byte.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 233\nloop length        : 1159\nused x86 registers : 16\nused mmx registers : 0\nused xmm registers : 7\nused ymm registers : 0\nused zmm registers : 1\nnb stack references: 26\nADD-SUB / MUL ratio: 1.00\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\ninstruction fetch    : 73.00 cycles\ninstruction queue    : 116.50 cycles\ndecoding             : 116.50 cycles\nmicro-operation queue: 125.00 cycles\nfront end            : 125.00 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1   | P2    | P3    | P4    | P5    | P6\n-------------------------------------------------------------\nuops   | 54.50 | 2.00 | 49.50 | 49.50 | 69.50 | 69.00 | 50.00\ncycles | 54.50 | 2.00 | 49.50 | 49.50 | 69.50 | 69.00 | 50.00\n\nCycles executing div or sqrt instructions: 56.00-84.00\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 125.00\nDispatch  : 69.50\nDIV/SQRT  : 56.00-84.00\nOverall L1: 125.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 0%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 0%\nINT+FP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 0%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 8%\nload   : 10%\nstore  : 9%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 10%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 6%\nFP\nall     : 12%\nload    : 12%\nstore   : 12%\nmul     : 12%\nadd-sub : 12%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 12%\nother   : 12%\nINT+FP\nall     : 9%\nload    : 11%\nstore   : 9%\nmul     : 12%\nadd-sub : 11%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 8%\nother   : 6%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 125.00 cycles. At this rate:\n - 2% of peak load performance is reached (2.69 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 2% of peak store performance is reached (1.86 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 125.00 to 116.50 cycles (1.07x speedup).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 14940\n\nInstruction                        | Nb FU | P0    | P1   | P2   | P3   | P4    | P5   | P6 | Latency | Recip. throughput\n-------------------------------------------------------------------------------------------------------------------------\nPUSH %RBP                          | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nMOV %RSP,%RBP                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nPUSH %R15                          | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R14                          | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nLEA (%RDI),%R14                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nPUSH %R13                          | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R12                          | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %RBX                          | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nAND $-0x40,%RSP                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA -0x130(%RSP),%RSP              | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0xb8(%RDI),%RAX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0xb0(%RDI),%RDX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0xa8(%RDI),%RCX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x98(%RDI),%RSI                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0xa0(%RDI),%RBX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x90(%RDI),%RDI                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %RAX,0xe0(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RDX,0x88(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RCX,0x108(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RBX,0x100(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RSI,0xb0(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RDI,0x110(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCALL 2120 <@plt_start@+0x100>      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nTEST %EAX,%EAX                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%RAX),%R15D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJE 15de2 <ssor_._omp_fn.0+0x14a2>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0x80(%R14),%R8                 | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOVL $0x2,0x124(%RSP)              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOV (%R8),%EBX                     | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCMP $0x2,%EBX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJLE 14e16 <ssor_._omp_fn.0+0x4d6>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCALL 2060 <@plt_start@+0x40>       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x78(%R14),%R12                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA (%RAX),%R11D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x68(%R14),%RCX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV $0x2,%R8D                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0xb0(%RSP),%RDI                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV (%R12),%EAX                    | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %RCX,0xf8(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV 0x100(%RSP),%RCX               | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %R14,0xd8(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nSUB $0x2,%EAX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,%EDX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nSAR $0x1f,%EDX                     | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nIDIV %R11D                         | 29    | 14.50 | 0    | 0    | 0    | 14.50 | 0    | 0  | 37-49   | 22-26\nLEA (%RDI),%R11                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,%R13D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nADD $0x1,%R13D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMP %EDX,%R15D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMOVL %R13D,%EAX                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 2       | 1\nADD %R11,%R11                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %RCX,%R11                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,%R12D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nLEA (%RAX),%R13D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %R15D,%R12D                   | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 3       | 1\nCMP %EDX,%R15D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x8(%R14),%RCX                 | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA (%RDI),%R14                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%R12,%RDX,1),%R9D             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x110(%RSP),%RDX               | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCMOVGE %R9D,%R12D                  | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 2       | 1\nSUB $-0x80,%RCX                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %R12D,%EAX                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nADD %R12D,%R13D                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD $0x2,%EAX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x2(%R13),%R10D                | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,0x118(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCLTQ\nIMUL %RDX,%RAX                     | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 5       | 2\nLEA (,%RDX,8),%R9                  | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %RCX,0xe8(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RAX,0xf0(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJMP 14aad <ssor_._omp_fn.0+0x16d>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOV 0xd8(%RSP),%R14                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %R15D,%R15D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EBX,0x124(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJE 15e18 <ssor_._omp_fn.0+0x14d8>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0x88(%R14),%RCX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA 0x12c(%RSP),%R12               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x128(%RSP),%RBX               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%R12),%RDX                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%RBX),%RSI                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x18ec5(%RIP),%RDI             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 26fe0 <sync_init_>            | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nCALL 21b0 <@plt_start@+0x190>      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x80(%R14),%R13                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOVL $0x2,0x124(%RSP)              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOV (%R13),%R10D                   | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA 0x124(%RSP),%R13               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %R10D,0x118(%RSP)              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCMP $0x2,%R10D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJG 14fc6 <ssor_._omp_fn.0+0x686>   | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nJMP 15077 <ssor_._omp_fn.0+0x737>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nNOPW (%RAX,%RAX,1)                 | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nCALL 21b0 <@plt_start@+0x190>      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x80(%R14),%RSI                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA 0x124(%RSP),%R13               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV (%RSI),%ECX                    | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nSUB $0x1,%ECX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %ECX,0x124(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCMP $0x1,%ECX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJG 151f1 <ssor_._omp_fn.0+0x8b1>   | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nJMP 152a0 <ssor_._omp_fn.0+0x960>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nNOPL (%RAX)                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nCALL 21b0 <@plt_start@+0x190>      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nVMOVSD 0x1c653(%RIP),%XMM6         | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nTEST %R15D,%R15D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVMOVSD 0x18210(%RIP),%XMM7         | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVSUBSD %XMM6,%XMM7,%XMM8           | 1     | 0.50  | 0.50 | 0    | 0    | 0     | 0    | 0  | 6       | 0.50\nVMOVSD 0x18004(%RIP),%XMM10        | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVMULSD %XMM6,%XMM8,%XMM9           | 1     | 0.50  | 0.50 | 0    | 0    | 0     | 0    | 0  | 6       | 0.50\nVDIVSD %XMM9,%XMM10,%XMM11         | 3     | 1     | 0    | 0    | 0    | 0     | 0    | 0  | 40-42   | 12-32\nJNE 15e37 <ssor_._omp_fn.0+0x14f7> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0x1c48f(%RIP),%ECX             | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %ECX,%ECX                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJNE 15e63 <ssor_._omp_fn.0+0x1523> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0x80(%R14),%R13                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOVL $0x2,0x124(%RSP)              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOV (%R13),%EDI                    | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %EDI,0xc0(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCMP $0x2,%EDI                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJLE 15b0c <ssor_._omp_fn.0+0x11cc> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nVMOVSD %XMM11,0xd8(%RSP)           | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nCALL 2060 <@plt_start@+0x40>       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x78(%R14),%R9                 | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA (%RAX),%R10D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0xb0(%RSP),%RDI                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x88(%RSP),%R12                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV (%R9),%EAX                     | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x100(%RSP),%RCX               | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0xe0(%RSP),%RBX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x68(%R14),%RSI                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nSUB $0x2,%EAX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV (%R14),%R13                    | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %EAX,%EDX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nSAR $0x1f,%EDX                     | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nIDIV %R10D                         | 29    | 14.50 | 0    | 0    | 0    | 14.50 | 0    | 0  | 37-49   | 22-26\nMOV 0x8(%R14),%R14                 | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %RSI,0x50(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nVMOVSD 0xd8(%RSP),%XMM0            | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nLEA 0x58(%R14),%RSI                | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVBROADCASTSD %XMM0,%ZMM1           | 1     | 1     | 0    | 0    | 0    | 0     | 0    | 0  | 5       | 1\nMOVL $0x2,0x118(%RSP)              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOV %RSI,0xf0(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R15D,0x3c(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA (%RAX),%R8D                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD $0x1,%R8D                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMP %EDX,%R15D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMOVL %R8D,%EAX                    | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 2       | 1\nADD %RDI,%RCX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %R12,%RBX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %RDI,%RCX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,%R11D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nADD %R12,%RBX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %R15D,%R11D                   | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 3       | 1\nCMP %EDX,%R15D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %RBX,0xa0(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA 0x198(%R14),%RBX               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %RCX,0x98(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RBX,0xe8(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA (%RDX,%R11,1),%EDI             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x108(%RSP),%RDX               | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA (%RDI),%R10D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMOVL %R11D,%R10D                  | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 2       | 1\nLEA 0x2(%R10),%R9D                 | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%RDX),%R8                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOVSXD %R9D,%R11                   | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nADD %R10D,%EAX                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %R11,%RDX                     | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 5       | 2\nMOV %EAX,0x7c(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nSAL $0x3,%R8                       | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nLEA 0x2(%RAX),%EAX                 | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL 0x110(%RSP),%R11              | 1     | 0     | 0    | 1    | 0    | 1     | 0    | 0  | 5       | 2\nMOV %R10D,0x78(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R9D,0x70(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %EAX,0x100(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R8,0xf8(%RSP)                 | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %RDX,0x48(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R11,0x40(%RSP)                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJMP 15461 <ssor_._omp_fn.0+0xb21>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOV 0x3c(%RSP),%R11D               | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0xc0(%RSP),%EAX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %R11D,%R11D                   | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,0x124(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJNE 15b1a <ssor_._omp_fn.0+0x11da> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0x1bc56(%RIP),%ECX             | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %ECX,%ECX                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJNE 15e86 <ssor_._omp_fn.0+0x1546> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA -0x28(%RBP),%RSP               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nPOP %RBX                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R12                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R13                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R14                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R15                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %RBP                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nRET\nMOV 0x1b97f(%RIP),%R9D             | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %R9D,%R9D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJE 15dfa <ssor_._omp_fn.0+0x14ba>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA 0x17f23(%RIP),%RDI             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 2c9b0 <timer_start_>          | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x80(%R14),%R10                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOVL $0x2,0x124(%RSP)              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOV (%R10),%EBX                    | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCMP $0x2,%EBX                      | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJG 149e4 <ssor_._omp_fn.0+0xa4>    | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0x1b94a(%RIP),%EBX             | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %EBX,%EBX                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJE 14e16 <ssor_._omp_fn.0+0x4d6>   | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA 0x17eeb(%RIP),%RDI             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 2c9d0 <timer_stop_>           | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nJMP 14e16 <ssor_._omp_fn.0+0x4d6>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOV 0x80(%R14),%RBX                | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOVL $0x2,0x124(%RSP)              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOV (%RBX),%R12D                   | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %R12D,0xc0(%RSP)               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nCMP $0x2,%R12D                     | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJG 15307 <ssor_._omp_fn.0+0x9c7>   | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nJMP 15b1a <ssor_._omp_fn.0+0x11da> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nVMOVSD %XMM11,0x118(%RSP)          | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nLEA 0x17e91(%RIP),%RDI             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 2c9b0 <timer_start_>          | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nVMOVSD 0x118(%RSP),%XMM11          | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nJMP 152e1 <ssor_._omp_fn.0+0x9a1>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nLEA -0x28(%RBP),%RSP               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x17e73(%RIP),%RDI             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nPOP %RBX                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R12                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R13                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R14                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R15                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %RBP                           | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJMP 2c9d0 <timer_stop_>            | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\n",
        },
      },
      header = {
        "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
        "0% of peak computational performance is used (0.02 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n - To reference allocatable arrays, use \"allocatable\" instead of \"pointer\" pointers or qualify them with the \"contiguous\" attribute (Fortran 2008)\n - For structures, limit to one indirection. For example, use a_b%c instead of a%b%c with a_b set to a%b before this function\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 125.00 to 32.00 cycles (3.91x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\ndo i a(i)%x = b(i)%x (slow, non stride 1) => do i a%x(i) = b%x(i) (fast, stride 1)\n",
          details = "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is not vectorized.\nOnly 9% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 125.00 to 9.12 cycles (13.71x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
        {
          workaround = "Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).",
          title = "FMA",
          txt = "Presence of both ADD/SUB and MUL operations.",
        },
      },
    },
  common = {
    header = {
      "The function is defined in /users/user2222/NPB3.4.1-MZ/NPB3.4-MZ-OMP/LU-MZ/ssor.f90:37-46,52-126,133-143,149-150.\n",
      "Warnings:\nIgnoring paths for analysis",
    },
  },
}
