_cqa_text_report = {
  paths = {
    {
      hint = {
        {
          details = "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - VBROADCASTSD: 1 occurrences\n",
          title = "Complex instructions",
          txt = "Detected COMPLEX INSTRUCTIONS.\n",
        },
        {
          title = "Type of elements and instruction set",
          txt = "54 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n",
        },
        {
          title = "Matching between your loop (in the source code) and the binary loop",
          txt = "The binary loop is composed of 54 FP arithmetical operations:\n - 30: addition or subtraction\n - 24: multiply\nThe binary loop is loading 480 bytes (60 double precision FP elements).\nThe binary loop is storing 48 bytes (6 double precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.10 FP operations per loaded or stored byte.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 164\nnb uops            : 165\nloop length        : 919\nused x86 registers : 15\nused mmx registers : 0\nused xmm registers : 14\nused ymm registers : 1\nused zmm registers : 0\nnb stack references: 20\nADD-SUB / MUL ratio: 1.25\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 44.25 cycles\nfront end            : 44.25 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1    | P2    | P3    | P4   | P5\n-----------------------------------------------------\nuops   | 43.00 | 43.00 | 34.50 | 34.50 | 6.00 | 43.00\ncycles | 43.00 | 43.00 | 34.50 | 34.50 | 6.00 | 43.00\n\nCycles executing div or sqrt instructions: NA\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 44.25\nDispatch  : 43.00\nOverall L1: 44.25\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 0%\nload   : 0%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\nINT+FP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 42%\nload   : 25%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 50%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 40%\nFP\nall     : 25%\nload    : 25%\nstore   : 25%\nmul     : 25%\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 25%\nINT+FP\nall     : 27%\nload    : 25%\nstore   : 25%\nmul     : 25%\nadd-sub : 26%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 39%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 44.25 cycles. At this rate:\n - 33% of peak load performance is reached (10.85 out of 32.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 6% of peak store performance is reached (1.08 out of 16.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the loop is: 82d8\n\nInstruction                            | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | Latency | Recip. throughput\n--------------------------------------------------------------------------------------------------------------------\nMOV 0x140(%RSP),%RAX                   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nADD %R9,%RAX                           | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nCMP %RAX,%R12                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nSETAE %R8B                             | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 1       | 0.50\nCMP %R9,%R13                           | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nSETBE %SIL                             | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 1       | 0.50\nOR %SIL,%R8B                           | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nJE b540 <exact_rhs_._omp_fn.0+0x41f0>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nLEA 0x2462f(%RIP),%RCX                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nCMP %RCX,%R13                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nSETBE %DIL                             | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 1       | 0.50\nADD $0x8,%RCX                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nCMP %RCX,%R12                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nSETAE %R11B                            | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 1       | 0.50\nOR %EDI,%R11D                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nCMPL $0x2,0x138(%RSP)                  | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 1       | 0.50\nSETA %DL                               | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 1       | 0.50\nTEST %DL,%R11B                         | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nJE b540 <exact_rhs_._omp_fn.0+0x41f0>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nMOV 0xf8(%RSP),%RAX                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nLEA 0x20(%R9),%RDX                     | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nMOV %R9,%RCX                           | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nVBROADCASTSD 0x245ee(%RIP),%YMM10      | 2     | 0    | 0    | 0.50 | 0.50 | 0  | 1    | 5       | 1\nLEA 0x8(%R9),%R8                       | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nLEA 0x10(%R9),%RDI                     | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nLEA 0x18(%R9),%RSI                     | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nLEA (%RAX,%RDX,1),%R11                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nMOV %R12,%RAX                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nNOPL (%RAX)                            | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0       | 0.25\nMOV 0xf4(%RSP),%R8D                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nCMP %R8D,0x128(%RSP)                   | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 1       | 0.50\nJE 85ae <exact_rhs_._omp_fn.0+0x125e>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nMOV 0xb0(%RSP),%RDI                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nMOV 0xe8(%RSP),%R11                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nMOV 0xa8(%RSP),%RAX                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nMOV 0xb8(%RSP),%RDX                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nADD %RBX,%RDI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nMOV 0xd0(%RSP),%RCX                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nLEA (%R11,%RDI,8),%RSI                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nMOV 0xc0(%RSP),%RDI                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nLEA -0x3b(%RAX,%R10,1),%R8             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nMOV 0xd8(%RSP),%RAX                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nLEA -0x3b(%RDX,%R10,1),%RDX            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD %FS:(%R15,%R8,8),%XMM2          | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nLEA -0x3b(%RCX,%R10,1),%RCX            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD (%RSI),%XMM1                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nLEA -0x3b(%RDI,%R10,1),%RDI            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nMOV 0x130(%RSP),%R8D                   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nVMULSD %FS:(%R15,%RDI,8),%XMM3,%XMM10  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD %FS:(%R15,%RDX,8),%XMM5,%XMM6   | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD %FS:(%R15,%RCX,8),%XMM3,%XMM9   | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nLEA -0x3b(%RAX,%R10,1),%RAX            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVSUBSD %XMM10,%XMM2,%XMM8              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %XMM6,%XMM8,%XMM12              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVSUBSD %XMM9,%XMM12,%XMM14             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %FS:(%R15,%RAX,8),%XMM14,%XMM0  | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 3       | 1\nVMULSD 0x24468(%RIP),%XMM0,%XMM13      | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVSUBSD %XMM13,%XMM1,%XMM11             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD %XMM11,(%RSI)                   | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0    | 3       | 1\nCMP %R8D,0xc8(%RSP)                    | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 1       | 0.50\nJG 85ae <exact_rhs_._omp_fn.0+0x125e>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nVMOVSD %FS:(%R15,%RDI,8),%XMM10        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVMULSD %FS:(%R15,%RDX,8),%XMM3,%XMM15  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD %FS:(%R15,%RCX,8),%XMM5,%XMM8   | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD %FS:(%R15,%RAX,8),%XMM3,%XMM12  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nMOV 0xa0(%RSP),%RDI                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nMOV 0x98(%RSP),%RSI                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nVSUBSD %XMM15,%XMM10,%XMM2             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nLEA -0x3b(%RDI,%R10,1),%RDI            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %XMM8,%XMM2,%XMM6               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nADD %RBX,%RSI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nLEA (%R11,%RSI,8),%RSI                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nVMOVSD (%RSI),%XMM13                   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVSUBSD %XMM12,%XMM6,%XMM9              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %FS:(%R15,%RDI,8),%XMM9,%XMM14  | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 3       | 1\nVMULSD 0x243f7(%RIP),%XMM14,%XMM0      | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVSUBSD %XMM0,%XMM13,%XMM1              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD %XMM1,(%RSI)                    | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0    | 3       | 1\nCMP %R8D,0xf0(%RSP)                    | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 1       | 0.50\nJG 85ae <exact_rhs_._omp_fn.0+0x125e>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nVMOVSD %FS:(%R15,%RDX,8),%XMM15        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVMULSD %FS:(%R15,%RCX,8),%XMM3,%XMM11  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD %FS:(%R15,%RAX,8),%XMM5,%XMM2   | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD %FS:(%R15,%RDI,8),%XMM3,%XMM6   | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nMOV 0x90(%RSP),%RDX                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nMOV 0x88(%RSP),%R8                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nVSUBSD %XMM11,%XMM15,%XMM10            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nLEA -0x3b(%RDX,%R10,1),%RCX            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %XMM2,%XMM10,%XMM8              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nADD %RBX,%R8                           | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nLEA (%R11,%R8,8),%R11                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nVMOVSD (%R11),%XMM0                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVSUBSD %XMM6,%XMM8,%XMM12              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %FS:(%R15,%RCX,8),%XMM12,%XMM9  | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 3       | 1\nVMULSD 0x2438c(%RIP),%XMM9,%XMM14      | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVSUBSD %XMM14,%XMM0,%XMM13             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD %XMM13,(%R11)                   | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0    | 3       | 1\nADD $0x1,%RBX                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nADD $0x8,%R12                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nADD $0x8,%R13                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nADD $0x1d8,%R9                         | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nADD $0x3b,%R10                         | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nADD $0x8,%R14                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nCMP $0x6,%RBX                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nJNE 82d8 <exact_rhs_._omp_fn.0+0xf88>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nMOV 0x68(%RSP),%RAX                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nLEA 0x1d0(%R9),%R8                     | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nMOV %R14,%RDI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nLEA (%RAX,%RBX,8),%RSI                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nSUB %RSI,%RDI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nSUB $0x28,%RDI                         | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nSHR $0x3,%RDI                          | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 1       | 0.50\nADD $0x1,%RDI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nAND $0x3,%EDI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nJE b694 <exact_rhs_._omp_fn.0+0x4344>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nCMP $0x1,%RDI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nJE b632 <exact_rhs_._omp_fn.0+0x42e2>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nCMP $0x2,%RDI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nJE b5d8 <exact_rhs_._omp_fn.0+0x4288>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nVMULSD -0x1c8(%R8),%XMM3,%XMM1         | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nADD $0x28,%RSI                         | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nVMULSD -0x1c0(%R8),%XMM5,%XMM10        | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMOVSD -0x1d0(%R8),%XMM11              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVMULSD -0x1b8(%R8),%XMM3,%XMM8         | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMOVSD -0x28(%RSI),%XMM14              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVSUBSD %XMM1,%XMM11,%XMM15             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %XMM10,%XMM15,%XMM2             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVSUBSD %XMM8,%XMM2,%XMM6               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD -0x1b0(%R8),%XMM6,%XMM12        | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 3       | 1\nLEA 0x1d8(%R9),%R8                     | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nVMULSD 0x21362(%RIP),%XMM12,%XMM9      | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVSUBSD %XMM9,%XMM14,%XMM0              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD %XMM0,-0x28(%RSI)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0    | 3       | 1\nVMULSD -0x1c8(%R8),%XMM3,%XMM13        | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nADD $0x28,%RSI                         | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nADD $0x8,%R8                           | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nVMOVSD -0x1d8(%R8),%XMM1               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVMULSD -0x1c8(%R8),%XMM5,%XMM15        | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD -0x1c0(%R8),%XMM3,%XMM2         | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMOVSD -0x28(%RSI),%XMM9               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVSUBSD %XMM13,%XMM1,%XMM11             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %XMM15,%XMM11,%XMM10            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVSUBSD %XMM2,%XMM10,%XMM8              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD -0x1b8(%R8),%XMM8,%XMM6         | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 3       | 1\nVMULSD 0x21308(%RIP),%XMM6,%XMM12      | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVSUBSD %XMM12,%XMM9,%XMM14             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD %XMM14,-0x28(%RSI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0    | 3       | 1\nVMULSD -0x1c8(%R8),%XMM3,%XMM13        | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nADD $0x28,%RSI                         | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nADD $0x8,%R8                           | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nVMOVSD -0x1d8(%R8),%XMM0               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVMULSD -0x1c8(%R8),%XMM5,%XMM1         | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD -0x1c0(%R8),%XMM3,%XMM10        | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMOVSD -0x28(%RSI),%XMM12              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVSUBSD %XMM13,%XMM0,%XMM11             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %XMM1,%XMM11,%XMM15             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVSUBSD %XMM10,%XMM15,%XMM2             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD -0x1b8(%R8),%XMM2,%XMM8         | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 3       | 1\nVMULSD 0x212ae(%RIP),%XMM8,%XMM6       | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVSUBSD %XMM6,%XMM12,%XMM9              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD %XMM9,-0x28(%RSI)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0    | 3       | 1\nCMP %R14,%RSI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nJE 85ae <exact_rhs_._omp_fn.0+0x125e>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nJMP 85ae <exact_rhs_._omp_fn.0+0x125e> | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 2\n",
        },
      },
      header = {
        "15% of peak computational performance is used (1.22 out of 8.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n - To reference allocatable arrays, use \"allocatable\" instead of \"pointer\" pointers or qualify them with the \"contiguous\" attribute (Fortran 2008)\n - For structures, limit to one indirection. For example, use a_b%c instead of a%b%c with a_b set to a%b before this loop\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 44.25 to 30.00 cycles (1.47x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one:\n  * recompile with fassociative-math (included in Ofast or ffast-math) to extend loop vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nFortran storage order is column-major: do i do j a(i,j) = b(i,j) (slow, non stride 1) => do i do j a(j,i) = b(i,j) (fast, stride 1)\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\ndo i a(i)%x = b(i)%x (slow, non stride 1) => do i a%x(i) = b%x(i) (fast, stride 1)\n",
          details = "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
          title = "Vectorization",
          txt = "Your loop is not vectorized.\nOnly 27% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 44.25 to 13.25 cycles (3.34x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
      },
    },
  },
  AVG = {
      hint = {
        {
          details = "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - VBROADCASTSD: 1 occurrences\n",
          title = "Complex instructions",
          txt = "Detected COMPLEX INSTRUCTIONS.\n",
        },
        {
          title = "Type of elements and instruction set",
          txt = "54 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n",
        },
        {
          title = "Matching between your loop (in the source code) and the binary loop",
          txt = "The binary loop is composed of 54 FP arithmetical operations:\n - 30: addition or subtraction\n - 24: multiply\nThe binary loop is loading 480 bytes (60 double precision FP elements).\nThe binary loop is storing 48 bytes (6 double precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.10 FP operations per loaded or stored byte.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 164\nnb uops            : 165\nloop length        : 919\nused x86 registers : 15\nused mmx registers : 0\nused xmm registers : 14\nused ymm registers : 1\nused zmm registers : 0\nnb stack references: 20\nADD-SUB / MUL ratio: 1.25\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 44.25 cycles\nfront end            : 44.25 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1    | P2    | P3    | P4   | P5\n-----------------------------------------------------\nuops   | 43.00 | 43.00 | 34.50 | 34.50 | 6.00 | 43.00\ncycles | 43.00 | 43.00 | 34.50 | 34.50 | 6.00 | 43.00\n\nCycles executing div or sqrt instructions: NA\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 44.25\nDispatch  : 43.00\nOverall L1: 44.25\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 0%\nload   : 0%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\nINT+FP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 42%\nload   : 25%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 50%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 40%\nFP\nall     : 25%\nload    : 25%\nstore   : 25%\nmul     : 25%\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 25%\nINT+FP\nall     : 27%\nload    : 25%\nstore   : 25%\nmul     : 25%\nadd-sub : 26%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 39%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 44.25 cycles. At this rate:\n - 33% of peak load performance is reached (10.85 out of 32.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 6% of peak store performance is reached (1.08 out of 16.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the loop is: 82d8\n\nInstruction                            | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | Latency | Recip. throughput\n--------------------------------------------------------------------------------------------------------------------\nMOV 0x140(%RSP),%RAX                   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nADD %R9,%RAX                           | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nCMP %RAX,%R12                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nSETAE %R8B                             | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 1       | 0.50\nCMP %R9,%R13                           | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nSETBE %SIL                             | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 1       | 0.50\nOR %SIL,%R8B                           | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nJE b540 <exact_rhs_._omp_fn.0+0x41f0>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nLEA 0x2462f(%RIP),%RCX                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nCMP %RCX,%R13                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nSETBE %DIL                             | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 1       | 0.50\nADD $0x8,%RCX                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nCMP %RCX,%R12                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nSETAE %R11B                            | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 1       | 0.50\nOR %EDI,%R11D                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nCMPL $0x2,0x138(%RSP)                  | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 1       | 0.50\nSETA %DL                               | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 1       | 0.50\nTEST %DL,%R11B                         | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nJE b540 <exact_rhs_._omp_fn.0+0x41f0>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nMOV 0xf8(%RSP),%RAX                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nLEA 0x20(%R9),%RDX                     | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nMOV %R9,%RCX                           | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nVBROADCASTSD 0x245ee(%RIP),%YMM10      | 2     | 0    | 0    | 0.50 | 0.50 | 0  | 1    | 5       | 1\nLEA 0x8(%R9),%R8                       | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nLEA 0x10(%R9),%RDI                     | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nLEA 0x18(%R9),%RSI                     | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nLEA (%RAX,%RDX,1),%R11                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nMOV %R12,%RAX                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nNOPL (%RAX)                            | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0       | 0.25\nMOV 0xf4(%RSP),%R8D                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nCMP %R8D,0x128(%RSP)                   | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 1       | 0.50\nJE 85ae <exact_rhs_._omp_fn.0+0x125e>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nMOV 0xb0(%RSP),%RDI                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nMOV 0xe8(%RSP),%R11                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nMOV 0xa8(%RSP),%RAX                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nMOV 0xb8(%RSP),%RDX                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nADD %RBX,%RDI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nMOV 0xd0(%RSP),%RCX                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nLEA (%R11,%RDI,8),%RSI                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nMOV 0xc0(%RSP),%RDI                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nLEA -0x3b(%RAX,%R10,1),%R8             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nMOV 0xd8(%RSP),%RAX                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nLEA -0x3b(%RDX,%R10,1),%RDX            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD %FS:(%R15,%R8,8),%XMM2          | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nLEA -0x3b(%RCX,%R10,1),%RCX            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD (%RSI),%XMM1                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nLEA -0x3b(%RDI,%R10,1),%RDI            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nMOV 0x130(%RSP),%R8D                   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nVMULSD %FS:(%R15,%RDI,8),%XMM3,%XMM10  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD %FS:(%R15,%RDX,8),%XMM5,%XMM6   | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD %FS:(%R15,%RCX,8),%XMM3,%XMM9   | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nLEA -0x3b(%RAX,%R10,1),%RAX            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVSUBSD %XMM10,%XMM2,%XMM8              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %XMM6,%XMM8,%XMM12              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVSUBSD %XMM9,%XMM12,%XMM14             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %FS:(%R15,%RAX,8),%XMM14,%XMM0  | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 3       | 1\nVMULSD 0x24468(%RIP),%XMM0,%XMM13      | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVSUBSD %XMM13,%XMM1,%XMM11             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD %XMM11,(%RSI)                   | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0    | 3       | 1\nCMP %R8D,0xc8(%RSP)                    | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 1       | 0.50\nJG 85ae <exact_rhs_._omp_fn.0+0x125e>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nVMOVSD %FS:(%R15,%RDI,8),%XMM10        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVMULSD %FS:(%R15,%RDX,8),%XMM3,%XMM15  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD %FS:(%R15,%RCX,8),%XMM5,%XMM8   | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD %FS:(%R15,%RAX,8),%XMM3,%XMM12  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nMOV 0xa0(%RSP),%RDI                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nMOV 0x98(%RSP),%RSI                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nVSUBSD %XMM15,%XMM10,%XMM2             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nLEA -0x3b(%RDI,%R10,1),%RDI            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %XMM8,%XMM2,%XMM6               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nADD %RBX,%RSI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nLEA (%R11,%RSI,8),%RSI                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nVMOVSD (%RSI),%XMM13                   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVSUBSD %XMM12,%XMM6,%XMM9              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %FS:(%R15,%RDI,8),%XMM9,%XMM14  | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 3       | 1\nVMULSD 0x243f7(%RIP),%XMM14,%XMM0      | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVSUBSD %XMM0,%XMM13,%XMM1              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD %XMM1,(%RSI)                    | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0    | 3       | 1\nCMP %R8D,0xf0(%RSP)                    | 1     | 0.33 | 0.33 | 0.50 | 0.50 | 0  | 0.33 | 1       | 0.50\nJG 85ae <exact_rhs_._omp_fn.0+0x125e>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nVMOVSD %FS:(%R15,%RDX,8),%XMM15        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVMULSD %FS:(%R15,%RCX,8),%XMM3,%XMM11  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD %FS:(%R15,%RAX,8),%XMM5,%XMM2   | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD %FS:(%R15,%RDI,8),%XMM3,%XMM6   | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nMOV 0x90(%RSP),%RDX                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nMOV 0x88(%RSP),%R8                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nVSUBSD %XMM11,%XMM15,%XMM10            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nLEA -0x3b(%RDX,%R10,1),%RCX            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %XMM2,%XMM10,%XMM8              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nADD %RBX,%R8                           | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nLEA (%R11,%R8,8),%R11                  | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nVMOVSD (%R11),%XMM0                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVSUBSD %XMM6,%XMM8,%XMM12              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %FS:(%R15,%RCX,8),%XMM12,%XMM9  | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 3       | 1\nVMULSD 0x2438c(%RIP),%XMM9,%XMM14      | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVSUBSD %XMM14,%XMM0,%XMM13             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD %XMM13,(%R11)                   | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0    | 3       | 1\nADD $0x1,%RBX                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nADD $0x8,%R12                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nADD $0x8,%R13                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nADD $0x1d8,%R9                         | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nADD $0x3b,%R10                         | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nADD $0x8,%R14                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nCMP $0x6,%RBX                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nJNE 82d8 <exact_rhs_._omp_fn.0+0xf88>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nMOV 0x68(%RSP),%RAX                    | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 2       | 0.50\nLEA 0x1d0(%R9),%R8                     | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nMOV %R14,%RDI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nLEA (%RAX,%RBX,8),%RSI                 | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nSUB %RSI,%RDI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nSUB $0x28,%RDI                         | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nSHR $0x3,%RDI                          | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 1       | 0.50\nADD $0x1,%RDI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nAND $0x3,%EDI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nJE b694 <exact_rhs_._omp_fn.0+0x4344>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nCMP $0x1,%RDI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nJE b632 <exact_rhs_._omp_fn.0+0x42e2>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nCMP $0x2,%RDI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nJE b5d8 <exact_rhs_._omp_fn.0+0x4288>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nVMULSD -0x1c8(%R8),%XMM3,%XMM1         | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nADD $0x28,%RSI                         | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nVMULSD -0x1c0(%R8),%XMM5,%XMM10        | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMOVSD -0x1d0(%R8),%XMM11              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVMULSD -0x1b8(%R8),%XMM3,%XMM8         | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMOVSD -0x28(%RSI),%XMM14              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVSUBSD %XMM1,%XMM11,%XMM15             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %XMM10,%XMM15,%XMM2             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVSUBSD %XMM8,%XMM2,%XMM6               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD -0x1b0(%R8),%XMM6,%XMM12        | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 3       | 1\nLEA 0x1d8(%R9),%R8                     | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 1       | 0.50\nVMULSD 0x21362(%RIP),%XMM12,%XMM9      | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVSUBSD %XMM9,%XMM14,%XMM0              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD %XMM0,-0x28(%RSI)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0    | 3       | 1\nVMULSD -0x1c8(%R8),%XMM3,%XMM13        | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nADD $0x28,%RSI                         | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nADD $0x8,%R8                           | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nVMOVSD -0x1d8(%R8),%XMM1               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVMULSD -0x1c8(%R8),%XMM5,%XMM15        | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD -0x1c0(%R8),%XMM3,%XMM2         | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMOVSD -0x28(%RSI),%XMM9               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVSUBSD %XMM13,%XMM1,%XMM11             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %XMM15,%XMM11,%XMM10            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVSUBSD %XMM2,%XMM10,%XMM8              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD -0x1b8(%R8),%XMM8,%XMM6         | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 3       | 1\nVMULSD 0x21308(%RIP),%XMM6,%XMM12      | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVSUBSD %XMM12,%XMM9,%XMM14             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD %XMM14,-0x28(%RSI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0    | 3       | 1\nVMULSD -0x1c8(%R8),%XMM3,%XMM13        | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nADD $0x28,%RSI                         | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nADD $0x8,%R8                           | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nVMOVSD -0x1d8(%R8),%XMM0               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVMULSD -0x1c8(%R8),%XMM5,%XMM1         | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMULSD -0x1c0(%R8),%XMM3,%XMM10        | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVMOVSD -0x28(%RSI),%XMM12              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 3       | 0.50\nVSUBSD %XMM13,%XMM0,%XMM11             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD %XMM1,%XMM11,%XMM15             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVSUBSD %XMM10,%XMM15,%XMM2             | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVADDSD -0x1b8(%R8),%XMM2,%XMM8         | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 3       | 1\nVMULSD 0x212ae(%RIP),%XMM8,%XMM6       | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 5       | 1\nVSUBSD %XMM6,%XMM12,%XMM9              | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 3       | 1\nVMOVSD %XMM9,-0x28(%RSI)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0    | 3       | 1\nCMP %R14,%RSI                          | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 1       | 0.33\nJE 85ae <exact_rhs_._omp_fn.0+0x125e>  | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 1-2\nJMP 85ae <exact_rhs_._omp_fn.0+0x125e> | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0       | 2\n",
        },
      },
      header = {
        "15% of peak computational performance is used (1.22 out of 8.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n - To reference allocatable arrays, use \"allocatable\" instead of \"pointer\" pointers or qualify them with the \"contiguous\" attribute (Fortran 2008)\n - For structures, limit to one indirection. For example, use a_b%c instead of a%b%c with a_b set to a%b before this loop\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 44.25 to 30.00 cycles (1.47x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one:\n  * recompile with fassociative-math (included in Ofast or ffast-math) to extend loop vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nFortran storage order is column-major: do i do j a(i,j) = b(i,j) (slow, non stride 1) => do i do j a(j,i) = b(i,j) (fast, stride 1)\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\ndo i a(i)%x = b(i)%x (slow, non stride 1) => do i a%x(i) = b%x(i) (fast, stride 1)\n",
          details = "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
          title = "Vectorization",
          txt = "Your loop is not vectorized.\nOnly 27% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 44.25 to 13.25 cycles (3.34x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
      },
    },
  common = {
    header = {
      "The loop is defined in /users/user2210/NPB3.4-MZ-MPI/BT-MZ/exact_rhs.f90:118-122,218.\n",
      "Warnings:\n - Non-innermost loop: analyzing only self part (ignoring child loops).\n - Ignoring paths for analysis\n - Too many paths. Rerun with max-paths=18\n - RecMII not computed since number of paths is unknown or > max_paths\n - Streams not analyzed since number of paths is unknown or > max_paths\n",
      "Try to simplify control and/or increase the maximum number of paths per function/loop through the 'max-paths-nb' option.\n",
      "This loop has 18 execution paths.\n",
      "The presence of multiple execution paths is typically the main/first bottleneck.\nTry to simplify control inside loop: ideally, try to remove all conditional expressions, for example by (if applicable):\n - hoisting them (moving them outside the loop)\n - turning them into conditional moves, MIN or MAX\n\n",
      "Ex: if (x<0) x=0 => x = max(0,x) (Fortran instrinsic procedure)\n",
    },
    nb_paths = 18,
  },
}
