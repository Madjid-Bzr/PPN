_cqa_text_report = {
  paths = {
    {
      hint = {
        {
          details = "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - .plt.sec@start: 1 occurrences\n - unknown: 12 occurrences\n",
          title = "CALL instructions",
          txt = "Detected function call instructions.\n",
        },
        {
          title = "Type of elements and instruction set",
          txt = "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements.",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 92 bytes.\nThe binary function is storing 196 bytes.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 244\nloop length        : 1163\nused x86 registers : 16\nused mmx registers : 0\nused xmm registers : 2\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 23\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\ninstruction fetch    : 73.00 cycles\ninstruction queue    : 122.00 cycles\ndecoding             : 122.00 cycles\nmicro-operation queue: 132.00 cycles\nfront end            : 132.00 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1   | P2    | P3    | P4    | P5    | P6\n-------------------------------------------------------------\nuops   | 65.00 | 0.00 | 26.00 | 26.00 | 99.00 | 99.00 | 41.00\ncycles | 65.00 | 0.00 | 26.00 | 26.00 | 99.00 | 99.00 | 41.00\n\nCycles executing div or sqrt instructions: 74.00-118.00\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 132.00\nDispatch  : 99.00\nDIV/SQRT  : 74.00-118.00\nOverall L1: 132.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 0%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 100%\nload    : 100%\nstore   : 100%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 100%\nINT+FP\nall     : 5%\nload    : 33%\nstore   : 5%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 3%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 7%\nload   : 9%\nstore  : 7%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 6%\nFP\nall     : 25%\nload    : 25%\nstore   : 25%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 25%\nINT+FP\nall     : 8%\nload    : 14%\nstore   : 8%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 6%\nother   : 7%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 132.00 cycles. At this rate:\n - 0% of peak load performance is reached (0.70 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 2% of peak store performance is reached (1.48 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 132.00 to 122.00 cycles (1.08x speedup).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 13a0\n\nInstruction                      | Nb FU | P0    | P1 | P2   | P3   | P4    | P5   | P6 | Latency | Recip. throughput\n---------------------------------------------------------------------------------------------------------------------\nENDBR64\nPUSH %RBP                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nMOV $0x3,%EDX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %RSP,%RBP                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nPUSH %R15                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R14                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R13                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R12                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %RBX                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nAND $-0x40,%RSP                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA -0x9b0(%RSP),%RSP            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EDI,0xdc(%RSP)              | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA 0xec(%RSP),%RCX              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %RSI,0xd0(%RSP)              | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA 0xdc(%RSP),%RDI              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0xd0(%RSP),%RSI              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %FS:0x28,%RAX                | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %RAX,0x9a8(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nXOR %EAX,%EAX\nCALL 12e0 <.plt.sec@start+0xf0>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nLEA 0xe8(%RSP),%RSI              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV $0x44000000,%EDI             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 1310 <.plt.sec@start+0x120> | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nLEA 0xe4(%RSP),%RSI              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV $0x44000000,%EDI             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 12d0 <.plt.sec@start+0xe0>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nCMPL $0x1,0xdc(%RSP)             | 1     | 0     | 0  | 1    | 0    | 0.50  | 0.50 | 0  | 1       | 1\nLEA 0x3c10(%RIP),%RAX            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %RAX,0xc8(%RSP)              | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJLE 1452 <main+0xb2>             | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0xd0(%RSP),%RDX              | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x8(%RDX),%RCX               | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %RCX,0xc8(%RSP)              | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV 0xc8(%RSP),%RDI              | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA 0x3d48(%RIP),%RSI            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 1290 <.plt.sec@start+0xa0>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nTEST %RAX,%RAX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%RAX),%R14                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJE 2808 <main+0x1468>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0x41cf(%RIP),%RSI            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV $0x32000002710,%RBX          | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVXORPD %XMM0,%XMM0,%XMM0\nXOR %R13D,%R13D\nVMOVAPD 0x41ee(%RIP),%XMM1       | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nMOV %RBX,0x5b87(%RIP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA 0x1a0(%RSP),%RBX             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOVL $0x64,0x5b7d(%RIP)          | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nVMOVAPD %XMM0,0x5b7d(%RIP)       | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVAPD %XMM1,0x5b85(%RIP)       | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nMOV %RSI,0x5b8e(%RIP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOVQ $0,0x5b9b(%RIP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOVL $0x32,0x5b99(%RIP)          | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nNOPW (%RAX,%RAX,1)               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nXCHG %AX,%AX                     | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nNOPL (%RAX)                      | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nLEA (%R11),%EDX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%R11),%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSAR $0x1f,%EDX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nIDIV %ESI                        | 29    | 14.50 | 0  | 0    | 0    | 14.50 | 0    | 0  | 37-49   | 22-26\nMOV %ESI,0x5b0(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R8D,0x5b4(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %EDX,%R15D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nMOV %EAX,%ECX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nXOR %EDX,%EDX\nLEA (%R9),%EAX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nDIV %ESI                         | 12    | 6     | 0  | 0    | 0    | 6     | 0    | 0  | 29-42   | 13-23\nXOR %EDX,%EDX\nLEA 0x1(%R15),%R14D              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD $0x2,%EAX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,0x5a8(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA (%R10),%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nDIV %R13D                        | 12    | 6     | 0  | 0    | 0    | 6     | 0    | 0  | 29-42   | 13-23\nXOR %EDX,%EDX\nADD $0x2,%EAX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,0x5ac(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA (%R15),%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %R9D,%EAX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nDIV %ESI                         | 12    | 6     | 0  | 0    | 0    | 6     | 0    | 0  | 29-42   | 13-23\nXOR %EDX,%EDX\nMOV %EAX,0x5a0(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA (%R10),%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ECX,%EAX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nLEA -0x1(%R15),%R10D             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%R10),%R11D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSHR $0x1f,%R11D                  | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nDIV %R13D                        | 12    | 6     | 0  | 0    | 0    | 6     | 0    | 0  | 29-42   | 13-23\nCMP %ESI,%R10D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSETGE %BL                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 2       | 1\nCMP %ESI,%R14D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSETGE %R13B                      | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 2       | 1\nCMP $-0x1,%R15D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSETL %DIL                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 2       | 1\nOR %EDI,%R13D                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nOR %R11B,%BL                     | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,0x5a4(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJNE 26f1 <main+0x1351>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %ECX,%ECX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 26b9 <main+0x1319>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%ECX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 26b9 <main+0x1319>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA (%RCX),%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ESI,%EAX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %R10D,%EAX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nTEST %R13B,%R13B                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,0x5bc(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJNE 26c4 <main+0x1324>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA (%RCX),%EDX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ESI,%EDX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %R14D,%EDX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nTEST %R15D,%R15D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA -0x1(%RCX),%R11D             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EDX,0x5b8(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA 0x1(%RCX),%ECX               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 26dd <main+0x133d>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %ESI,%R15D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 26dd <main+0x133d>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %R11D,%R11D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 26d5 <main+0x1335>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%R11D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 26d5 <main+0x1335>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA (%R11),%EDI                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ESI,%EDI                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %R15D,%EDI                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EDI,0x5c0(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nTEST %ECX,%ECX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 26cc <main+0x132c>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%ECX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 26cc <main+0x132c>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA (%RCX),%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ESI,%EAX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %EAX,%R15D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %R15D,0x5c4(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nTEST %BL,%BL                     | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJNE 274a <main+0x13aa>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %R11D,%R11D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 2741 <main+0x13a1>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%R11D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 2741 <main+0x13a1>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA (%R11),%R15D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ESI,%R15D                  | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %R10D,%R15D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %R15D,0x5c8(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nTEST %R13B,%R13B                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJNE 2712 <main+0x1372>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %R11D,%R11D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 2660 <main+0x12c0>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%R11D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 2660 <main+0x12c0>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nIMUL %ESI,%R11D                  | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %R14D,%R11D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nTEST %ECX,%ECX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %R11D,0x5cc(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJS 2673 <main+0x12d3>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%ECX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 2673 <main+0x12d3>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA (%RCX),%EBX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ESI,%EBX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %EBX,%R10D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %R10D,0x5d0(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA -0x28(%RBP),%RSP             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nXOR %EAX,%EAX\nPOP %RBX                         | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R12                         | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R13                         | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R14                         | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R15                         | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %RBP                         | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nRET\nNOPL (%RAX)                      | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nMOVSXD %EDI,%RSI                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nMOV $0x1,%R8D                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV $0x1,%R13D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJMP 16f1 <main+0x351>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOVL $-0x1,0x5cc(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nTEST %ECX,%ECX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJNS 1879 <main+0x4d9>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOVL $-0x1,0x5d0(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOVL $-0x1,0x5bc(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nOR $-0x1,%EDX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJMP 17b8 <main+0x418>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nOR $-0x1,%R15D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJMP 1813 <main+0x473>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nOR $-0x1,%EDI                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJMP 17f3 <main+0x453>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOVL $-0x1,0x5c0(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nOR $-0x1,%R15D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJMP 1813 <main+0x473>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOVL $-0x1,0x5bc(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nTEST %R13B,%R13B                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJNE 26c4 <main+0x1324>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %ECX,%ECX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 26c4 <main+0x1324>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%ECX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJL 17b0 <main+0x410>             | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nXCHG %AX,%AX                     | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nJMP 26c4 <main+0x1324>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOVL $-0x1,0x5cc(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nCMP %R8D,%ECX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 2673 <main+0x12d3>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %ECX,%ECX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 2673 <main+0x12d3>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nIMUL %ESI,%ECX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %ECX,%R10D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %R10D,0x5d0(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJMP 267e <main+0x12de>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nOR $-0x1,%R15D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJMP 183f <main+0x49f>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOVL $-0x1,0x5c8(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nTEST %R13B,%R13B                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJNE 282f <main+0x148f>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%R11D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 281f <main+0x147f>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %R11D,%R11D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 281f <main+0x147f>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA (%R11),%EDI                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ESI,%EDI                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %R14D,%EDI                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EDI,0x5cc(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV 0xc8(%RSP),%RDI              | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCALL 1390 <.plt.sec@start+0x1a0> | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nCALL 1220 <.plt.sec@start+0x30>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOVQ $-0x1,0x5cc(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nJMP 267e <main+0x12de>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOV 0x4821(%RIP),%RDI            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCALL 1390 <.plt.sec@start+0x1a0> | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nCALL 1220 <.plt.sec@start+0x30>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nLEA 0x2d80(%RIP),%RCX            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV $0x46,%EDX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x2980(%RIP),%RSI            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x2988(%RIP),%RDI            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 1260 <.plt.sec@start+0x70>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nLEA 0x278d(%RIP),%RDI            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 1390 <.plt.sec@start+0x1a0> | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nCALL 1220 <.plt.sec@start+0x30>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x4770(%RIP),%R10            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA (%RBX),%R8                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%R13),%ECX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x297a(%RIP),%RDX            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV $0x1,%ESI                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nXOR %EAX,%EAX\nMOV (%R10),%RDI                  | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCALL 1240 <.plt.sec@start+0x50>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nCALL 1220 <.plt.sec@start+0x30>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nNOPW (%RAX,%RAX,1)               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\n",
        },
      },
      header = {
        "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
        "0% of peak computational performance is used (0.00 out of 4.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 132.00 to 29.00 cycles (4.55x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
          details = "5% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 33% of SSE/AVX loads are used in vector version.\n - 5% of SSE/AVX stores are used in vector version.\n - 0% of SSE/AVX nil are used in vector version.\n - 3% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is not vectorized.\nOnly 8% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your function, you can lower the cost of an iteration from 132.00 to 8.82 cycles (14.96x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
      },
    },
  },
  AVG = {
      hint = {
        {
          details = "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - .plt.sec@start: 1 occurrences\n - unknown: 12 occurrences\n",
          title = "CALL instructions",
          txt = "Detected function call instructions.\n",
        },
        {
          title = "Type of elements and instruction set",
          txt = "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements.",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 92 bytes.\nThe binary function is storing 196 bytes.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 244\nloop length        : 1163\nused x86 registers : 16\nused mmx registers : 0\nused xmm registers : 2\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 23\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\ninstruction fetch    : 73.00 cycles\ninstruction queue    : 122.00 cycles\ndecoding             : 122.00 cycles\nmicro-operation queue: 132.00 cycles\nfront end            : 132.00 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1   | P2    | P3    | P4    | P5    | P6\n-------------------------------------------------------------\nuops   | 65.00 | 0.00 | 26.00 | 26.00 | 99.00 | 99.00 | 41.00\ncycles | 65.00 | 0.00 | 26.00 | 26.00 | 99.00 | 99.00 | 41.00\n\nCycles executing div or sqrt instructions: 74.00-118.00\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 132.00\nDispatch  : 99.00\nDIV/SQRT  : 74.00-118.00\nOverall L1: 132.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 0%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 100%\nload    : 100%\nstore   : 100%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 100%\nINT+FP\nall     : 5%\nload    : 33%\nstore   : 5%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 3%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 7%\nload   : 9%\nstore  : 7%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 6%\nFP\nall     : 25%\nload    : 25%\nstore   : 25%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 25%\nINT+FP\nall     : 8%\nload    : 14%\nstore   : 8%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 6%\nother   : 7%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 132.00 cycles. At this rate:\n - 0% of peak load performance is reached (0.70 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 2% of peak store performance is reached (1.48 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 132.00 to 122.00 cycles (1.08x speedup).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 13a0\n\nInstruction                      | Nb FU | P0    | P1 | P2   | P3   | P4    | P5   | P6 | Latency | Recip. throughput\n---------------------------------------------------------------------------------------------------------------------\nENDBR64\nPUSH %RBP                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nMOV $0x3,%EDX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %RSP,%RBP                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nPUSH %R15                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R14                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R13                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R12                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %RBX                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 0       | 1\nAND $-0x40,%RSP                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA -0x9b0(%RSP),%RSP            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EDI,0xdc(%RSP)              | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA 0xec(%RSP),%RCX              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %RSI,0xd0(%RSP)              | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA 0xdc(%RSP),%RDI              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0xd0(%RSP),%RSI              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %FS:0x28,%RAX                | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %RAX,0x9a8(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nXOR %EAX,%EAX\nCALL 12e0 <.plt.sec@start+0xf0>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nLEA 0xe8(%RSP),%RSI              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV $0x44000000,%EDI             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 1310 <.plt.sec@start+0x120> | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nLEA 0xe4(%RSP),%RSI              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV $0x44000000,%EDI             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 12d0 <.plt.sec@start+0xe0>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nCMPL $0x1,0xdc(%RSP)             | 1     | 0     | 0  | 1    | 0    | 0.50  | 0.50 | 0  | 1       | 1\nLEA 0x3c10(%RIP),%RAX            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %RAX,0xc8(%RSP)              | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJLE 1452 <main+0xb2>             | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0xd0(%RSP),%RDX              | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x8(%RDX),%RCX               | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV %RCX,0xc8(%RSP)              | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV 0xc8(%RSP),%RDI              | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA 0x3d48(%RIP),%RSI            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 1290 <.plt.sec@start+0xa0>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nTEST %RAX,%RAX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%RAX),%R14                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJE 2808 <main+0x1468>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV 0x41cf(%RIP),%RSI            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV $0x32000002710,%RBX          | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVXORPD %XMM0,%XMM0,%XMM0\nXOR %R13D,%R13D\nVMOVAPD 0x41ee(%RIP),%XMM1       | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nMOV %RBX,0x5b87(%RIP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA 0x1a0(%RSP),%RBX             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOVL $0x64,0x5b7d(%RIP)          | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nVMOVAPD %XMM0,0x5b7d(%RIP)       | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVAPD %XMM1,0x5b85(%RIP)       | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nMOV %RSI,0x5b8e(%RIP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOVQ $0,0x5b9b(%RIP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOVL $0x32,0x5b99(%RIP)          | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nNOPW (%RAX,%RAX,1)               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nXCHG %AX,%AX                     | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nNOPL (%RAX)                      | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nLEA (%R11),%EDX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%R11),%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSAR $0x1f,%EDX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nIDIV %ESI                        | 29    | 14.50 | 0  | 0    | 0    | 14.50 | 0    | 0  | 37-49   | 22-26\nMOV %ESI,0x5b0(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %R8D,0x5b4(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV %EDX,%R15D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nMOV %EAX,%ECX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nXOR %EDX,%EDX\nLEA (%R9),%EAX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nDIV %ESI                         | 12    | 6     | 0  | 0    | 0    | 6     | 0    | 0  | 29-42   | 13-23\nXOR %EDX,%EDX\nLEA 0x1(%R15),%R14D              | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD $0x2,%EAX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,0x5a8(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA (%R10),%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nDIV %R13D                        | 12    | 6     | 0  | 0    | 0    | 6     | 0    | 0  | 29-42   | 13-23\nXOR %EDX,%EDX\nADD $0x2,%EAX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,0x5ac(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA (%R15),%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %R9D,%EAX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nDIV %ESI                         | 12    | 6     | 0  | 0    | 0    | 6     | 0    | 0  | 29-42   | 13-23\nXOR %EDX,%EDX\nMOV %EAX,0x5a0(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA (%R10),%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ECX,%EAX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nLEA -0x1(%R15),%R10D             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%R10),%R11D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSHR $0x1f,%R11D                  | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nDIV %R13D                        | 12    | 6     | 0  | 0    | 0    | 6     | 0    | 0  | 29-42   | 13-23\nCMP %ESI,%R10D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSETGE %BL                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 2       | 1\nCMP %ESI,%R14D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSETGE %R13B                      | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 2       | 1\nCMP $-0x1,%R15D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSETL %DIL                        | 1     | 0     | 0  | 0    | 0    | 1     | 1    | 0  | 2       | 1\nOR %EDI,%R13D                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nOR %R11B,%BL                     | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,0x5a4(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJNE 26f1 <main+0x1351>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %ECX,%ECX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 26b9 <main+0x1319>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%ECX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 26b9 <main+0x1319>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA (%RCX),%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ESI,%EAX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %R10D,%EAX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nTEST %R13B,%R13B                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EAX,0x5bc(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJNE 26c4 <main+0x1324>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA (%RCX),%EDX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ESI,%EDX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %R14D,%EDX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nTEST %R15D,%R15D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA -0x1(%RCX),%R11D             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EDX,0x5b8(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA 0x1(%RCX),%ECX               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 26dd <main+0x133d>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %ESI,%R15D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 26dd <main+0x133d>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %R11D,%R11D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 26d5 <main+0x1335>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%R11D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 26d5 <main+0x1335>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA (%R11),%EDI                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ESI,%EDI                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %R15D,%EDI                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EDI,0x5c0(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nTEST %ECX,%ECX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 26cc <main+0x132c>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%ECX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 26cc <main+0x132c>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA (%RCX),%EAX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ESI,%EAX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %EAX,%R15D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %R15D,0x5c4(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nTEST %BL,%BL                     | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJNE 274a <main+0x13aa>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %R11D,%R11D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 2741 <main+0x13a1>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%R11D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 2741 <main+0x13a1>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA (%R11),%R15D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ESI,%R15D                  | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %R10D,%R15D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %R15D,0x5c8(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nTEST %R13B,%R13B                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJNE 2712 <main+0x1372>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %R11D,%R11D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 2660 <main+0x12c0>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%R11D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 2660 <main+0x12c0>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nIMUL %ESI,%R11D                  | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %R14D,%R11D                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nTEST %ECX,%ECX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %R11D,0x5cc(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJS 2673 <main+0x12d3>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%ECX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 2673 <main+0x12d3>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA (%RCX),%EBX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ESI,%EBX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %EBX,%R10D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %R10D,0x5d0(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nLEA -0x28(%RBP),%RSP             | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nXOR %EAX,%EAX\nPOP %RBX                         | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R12                         | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R13                         | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R14                         | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R15                         | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %RBP                         | 2     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nRET\nNOPL (%RAX)                      | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nMOVSXD %EDI,%RSI                 | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 1       | 1\nMOV $0x1,%R8D                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV $0x1,%R13D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJMP 16f1 <main+0x351>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOVL $-0x1,0x5cc(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nTEST %ECX,%ECX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJNS 1879 <main+0x4d9>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOVL $-0x1,0x5d0(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nMOVL $-0x1,0x5bc(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nOR $-0x1,%EDX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJMP 17b8 <main+0x418>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nOR $-0x1,%R15D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJMP 1813 <main+0x473>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nOR $-0x1,%EDI                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJMP 17f3 <main+0x453>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOVL $-0x1,0x5c0(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nOR $-0x1,%R15D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJMP 1813 <main+0x473>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOVL $-0x1,0x5bc(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nTEST %R13B,%R13B                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJNE 26c4 <main+0x1324>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %ECX,%ECX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 26c4 <main+0x1324>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%ECX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJL 17b0 <main+0x410>             | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nXCHG %AX,%AX                     | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nJMP 26c4 <main+0x1324>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOVL $-0x1,0x5cc(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nCMP %R8D,%ECX                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 2673 <main+0x12d3>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %ECX,%ECX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 2673 <main+0x12d3>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nIMUL %ESI,%ECX                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %ECX,%R10D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %R10D,0x5d0(%RSP)            | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nJMP 267e <main+0x12de>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nOR $-0x1,%R15D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJMP 183f <main+0x49f>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOVL $-0x1,0x5c8(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nTEST %R13B,%R13B                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJNE 282f <main+0x148f>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nCMP %R8D,%R11D                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJGE 281f <main+0x147f>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %R11D,%R11D                 | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJS 281f <main+0x147f>            | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nLEA (%R11),%EDI                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nIMUL %ESI,%EDI                   | 1     | 0     | 0  | 0    | 0    | 1     | 0    | 0  | 3       | 1\nADD %R14D,%EDI                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV %EDI,0x5cc(%RSP)             | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nMOV 0xc8(%RSP),%RDI              | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCALL 1390 <.plt.sec@start+0x1a0> | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nCALL 1220 <.plt.sec@start+0x30>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOVQ $-0x1,0x5cc(%RSP)           | 1     | 0     | 0  | 0.50 | 0.50 | 0     | 0    | 1  | 1       | 1\nJMP 267e <main+0x12de>           | 1     | 0     | 0  | 0    | 0    | 0     | 1    | 0  | 0       | 2\nMOV 0x4821(%RIP),%RDI            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCALL 1390 <.plt.sec@start+0x1a0> | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nCALL 1220 <.plt.sec@start+0x30>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nLEA 0x2d80(%RIP),%RCX            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV $0x46,%EDX                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x2980(%RIP),%RSI            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x2988(%RIP),%RDI            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 1260 <.plt.sec@start+0x70>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nLEA 0x278d(%RIP),%RDI            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCALL 1390 <.plt.sec@start+0x1a0> | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nCALL 1220 <.plt.sec@start+0x30>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOV 0x4770(%RIP),%R10            | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nLEA (%RBX),%R8                   | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA (%R13),%ECX                  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x297a(%RIP),%RDX            | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV $0x1,%ESI                    | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nXOR %EAX,%EAX\nMOV (%R10),%RDI                  | 1     | 0     | 0  | 1    | 0    | 0     | 0    | 0  | 4       | 1\nCALL 1240 <.plt.sec@start+0x50>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nCALL 1220 <.plt.sec@start+0x30>  | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nNOPW (%RAX,%RAX,1)               | 1     | 0     | 0  | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\n",
        },
      },
      header = {
        "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
        "0% of peak computational performance is used (0.00 out of 4.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 132.00 to 29.00 cycles (4.55x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
          details = "5% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 33% of SSE/AVX loads are used in vector version.\n - 5% of SSE/AVX stores are used in vector version.\n - 0% of SSE/AVX nil are used in vector version.\n - 3% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is not vectorized.\nOnly 8% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your function, you can lower the cost of an iteration from 132.00 to 8.82 cycles (14.96x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
      },
    },
  common = {
    header = {
      "The function is defined in:\n - /users/user2207/lbm_opt/include/lbm_struct.h:139\n - /usr/include/x86_64-linux-gnu/bits/stdio2.h:100,107,265\n - /users/user2207/lbm_opt/src/main.c:27,35,46-54,62,114-138,144-162,169-184,203-227,235,242-259,267-270\n - /users/user2207/lbm_opt/src/lbm_comm.c:14-15,30,43-46,67-110,126-133,150,157-163,253-264\n - /users/user2207/lbm_opt/src/lbm_phys.c:187,212-215,229\n - /users/user2207/lbm_opt/src/lbm_config.c:16-28,37-41,55-59,68-119\n - /users/user2207/lbm_opt/src/lbm_struct.c:14-15,21-23,30-35,43-45\n\n",
      "Warnings:\nIgnoring paths for analysis",
    },
  },
}
