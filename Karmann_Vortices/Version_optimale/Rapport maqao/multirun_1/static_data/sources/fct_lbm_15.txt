/users/user2207/lbm_opt/include/lbm_struct.h: 130 - 130
--------------------------------------------------------------------------------

130:     return &mesh->cells[(x * mesh->height + y) * DIRECTIONS];
/usr/lib/gcc/x86_64-linux-gnu/9/include/avx512fintrin.h: 5852 - 15884
--------------------------------------------------------------------------------

5852:   return (__m256d) __builtin_ia32_extractf64x4_mask ((__v8df) __A,
[...]
12478:   return (__m512d) ((__v8df)__A * (__v8df)__B);
[...]
15884:   __MM512_REDUCE_OP (+);
/usr/lib/gcc/x86_64-linux-gnu/9/include/avxintrin.h: 513 - 513
--------------------------------------------------------------------------------

513:   return (__m128d) __builtin_ia32_vextractf128_pd256 ((__v4df)__X, __N);
/users/user2207/lbm_opt/src/lbm_phys.c: 47 - 219
--------------------------------------------------------------------------------

47:     res += cell[DIRECTIONS - 1];
[...]
58:     v[0] = _mm512_reduce_add_pd(_mm512_mul_pd(vcell, dir_a)) / cell_density;
59:     v[1] = _mm512_reduce_add_pd(_mm512_mul_pd(vcell, dir_b)) / cell_density;
[...]
92:     double const v2 = velocity[0] * velocity[0] + velocity[1] * velocity[1];
93:     // Compute `e_i * v_i / c`
94:     double const p1 = direction_a[direction] * velocity[0] +
95:                       direction_b[direction] * velocity[1];
96:     double const p2 = p1 * p1;
97:     // Terms without density and direction weight
98:     double f_eq = 1.0 + (3.0 * p1) + (4.5 * p2) - (1.5 * v2);
99:     // Multiply everything by the density and direction weight
100:     f_eq *= equil_weight[direction] * density;
[...]
117:         cell_out[k] = cell_in[k] - RELAX_PARAMETER * (cell_in[k] - f_eq);
[...]
215:     #pragma omp parallel 
216:     {
217:         #pragma omp for schedule(static)
218:         for (size_t i = 1; i < mesh_in->width - 1; i++) {
219:             for (size_t j = 1; j < mesh_in->height - 1; j++) {
