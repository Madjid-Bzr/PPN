_cqa_text_report = {
  paths = {
    {
      hint = {
        {
          details = "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - RET: 1 occurrences\n",
          title = "Complex instructions",
          txt = "Detected COMPLEX INSTRUCTIONS.\n",
        },
        {
          title = "Type of elements and instruction set",
          txt = "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements.",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 12 bytes.\nThe binary function is storing 1240 bytes.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 185\nnb uops            : 186\nloop length        : 1739\nused x86 registers : 9\nused mmx registers : 0\nused xmm registers : 1\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 47.75 cycles\nfront end            : 47.75 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0   | P1    | P2    | P3    | P4     | P5\n-----------------------------------------------------\nuops   | 2.00 | 25.00 | 79.00 | 79.00 | 155.00 | 1.00\ncycles | 2.00 | 25.00 | 79.00 | 79.00 | 155.00 | 1.00\n\nCycles executing div or sqrt instructions: NA\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 47.75\nDispatch  : 155.00\nOverall L1: 155.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 0%\nload   : 0%\nstore  : 0%\nmul    : 0%\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : NA (no other vectorizable/vectorized instructions)\nFP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 25%\nload   : 50%\nstore  : 25%\nmul    : 50%\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : NA (no other vectorizable/vectorized instructions)\nFP\nall     : 25%\nload    : 25%\nstore   : 25%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 25%\nload    : 37%\nstore   : 25%\nmul     : 50%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 155.00 cycles. At this rate:\n - 0% of peak load performance is reached (0.08 out of 32.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 50% of peak store performance is reached (8.00 out of 16.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Found no such bottlenecks.",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 6a50\n\nInstruction                     | Nb FU | P0   | P1   | P2   | P3   | P4 | P5 | Latency | Recip. throughput\n-----------------------------------------------------------------------------------------------------------\nMOVSXD (%RSI),%RAX              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 1       | 0.50\nMOVQ $0,(%RDI)                  | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x190(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nIMUL $0x4b,%RAX,%RSI            | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nLEA 0x30(%RDI,%RSI,8),%RDX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,-0x30(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x58(%RDI,%RSI,8),%RCX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x98(%RDX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x80(%RDI,%RSI,8),%R8       | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x160(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xa8(%RDI,%RSI,8),%R9       | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nLEA 0xd0(%RDI,%RSI,8),%R10      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x28(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0xf0(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x38(%RDI,%RSI,8),%R11      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x1b8(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x60(%RDI,%RSI,8),%RAX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nLEA 0x88(%RDI,%RSI,8),%RDX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,-0x30(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RCX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xb0(%RDI,%RSI,8),%RCX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x50(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x118(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1e0(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R8)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R8)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R8)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xd8(%RDI,%RSI,8),%R8       | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x78(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x140(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x208(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R9)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x40(%RDI,%RSI,8),%R9       | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0xa0(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x168(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x230(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R10)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x68(%RDI,%RSI,8),%R10      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x8(%RDI)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0xd0(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x198(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R11)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R11)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R11)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x90(%RDI,%RSI,8),%R11      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x30(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1c0(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RAX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RAX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RAX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xb8(%RDI,%RSI,8),%RAX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x58(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x120(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1e8(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RDX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xe0(%RDI,%RSI,8),%RDX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x80(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x148(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x210(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RCX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x48(%RDI,%RSI,8),%RCX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0xa8(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x170(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x238(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R8)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R8)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R8)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x70(%RDI,%RSI,8),%R8       | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x10(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0xd8(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1a0(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R9)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x98(%RDI,%RSI,8),%R9       | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x38(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x100(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1c8(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R10)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xc0(%RDI,%RSI,8),%R10      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x60(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1f0(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R11)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R11)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R11)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xe8(%RDI,%RSI,8),%R11      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x88(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x150(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x218(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RAX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RAX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RAX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x50(%RDI,%RSI,8),%RAX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0xb0(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x178(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x240(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RDX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x78(%RDI,%RSI,8),%RDX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x18(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0xe0(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1a8(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RCX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xa0(%RDI,%RSI,8),%RCX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x40(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x108(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1d0(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R8)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R8)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R8)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x19(%RSI),%R8              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 1       | 0.50\nMOVQ $0,0x68(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x130(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1f8(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R9)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA (%RDI,%R8,8),%R9            | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 1       | 0.50\nMOVQ $0,0x90(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x220(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R10)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xf0(%RDI,%RSI,8),%R10      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0xb8(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x180(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x248(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R11)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R11)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R11)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x20(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0xe8(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1b0(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RAX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RAX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RAX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x48(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x110(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1d8(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RDX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x70(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x138(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x200(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD 0x21381(%RIP),%XMM0      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 3       | 0.50\nMOVQ $0,-0x30(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RCX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x228(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R9)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0xc0(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x250(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R10)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0xc8(%RDI)         | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,(%RDI,%R8,8)       | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0xf8(%RDI)         | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0xf8(%RDI,%RSI,8)  | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0x128(%RDI)        | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0x128(%RDI,%RSI,8) | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0x158(%RDI)        | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0x158(%RDI,%RSI,8) | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0x188(%RDI)        | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0x188(%RDI,%RSI,8) | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nRET                             | 2     | 0    | 0    | 0.50 | 0.50 | 0  | 1  | 0       | 2\n",
        },
      },
      header = {
        "0% of peak computational performance is used (0.00 out of 2.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n - To reference allocatable arrays, use \"allocatable\" instead of \"pointer\" pointers or qualify them with the \"contiguous\" attribute (Fortran 2008)\n - For structures, limit to one indirection. For example, use a_b%c instead of a%b%c with a_b set to a%b before this function\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 155.00 to 10.00 cycles (15.50x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\ndo i a(i)%x = b(i)%x (slow, non stride 1) => do i a%x(i) = b%x(i) (fast, stride 1)\n",
          details = "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is not vectorized.\nOnly 25% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 155.00 to 41.25 cycles (3.76x speedup).",
        },
        {
          workaround = "Write less array elements",
          title = "Execution units bottlenecks",
          txt = "Performance is limited by writing data to caches/RAM (the store unit is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 155.00 to 79.00 cycles (1.96x speedup).\n",
        },
      },
      potential = {
      },
    },
  },
  AVG = {
      hint = {
        {
          details = "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - RET: 1 occurrences\n",
          title = "Complex instructions",
          txt = "Detected COMPLEX INSTRUCTIONS.\n",
        },
        {
          title = "Type of elements and instruction set",
          txt = "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements.",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 12 bytes.\nThe binary function is storing 1240 bytes.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 185\nnb uops            : 186\nloop length        : 1739\nused x86 registers : 9\nused mmx registers : 0\nused xmm registers : 1\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 47.75 cycles\nfront end            : 47.75 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0   | P1    | P2    | P3    | P4     | P5\n-----------------------------------------------------\nuops   | 2.00 | 25.00 | 79.00 | 79.00 | 155.00 | 1.00\ncycles | 2.00 | 25.00 | 79.00 | 79.00 | 155.00 | 1.00\n\nCycles executing div or sqrt instructions: NA\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 47.75\nDispatch  : 155.00\nOverall L1: 155.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 0%\nload   : 0%\nstore  : 0%\nmul    : 0%\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : NA (no other vectorizable/vectorized instructions)\nFP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 25%\nload   : 50%\nstore  : 25%\nmul    : 50%\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : NA (no other vectorizable/vectorized instructions)\nFP\nall     : 25%\nload    : 25%\nstore   : 25%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 25%\nload    : 37%\nstore   : 25%\nmul     : 50%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 155.00 cycles. At this rate:\n - 0% of peak load performance is reached (0.08 out of 32.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 50% of peak store performance is reached (8.00 out of 16.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Found no such bottlenecks.",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 6a50\n\nInstruction                     | Nb FU | P0   | P1   | P2   | P3   | P4 | P5 | Latency | Recip. throughput\n-----------------------------------------------------------------------------------------------------------\nMOVSXD (%RSI),%RAX              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 1       | 0.50\nMOVQ $0,(%RDI)                  | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x190(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nIMUL $0x4b,%RAX,%RSI            | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nLEA 0x30(%RDI,%RSI,8),%RDX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,-0x30(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x58(%RDI,%RSI,8),%RCX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x98(%RDX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x80(%RDI,%RSI,8),%R8       | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x160(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xa8(%RDI,%RSI,8),%R9       | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nLEA 0xd0(%RDI,%RSI,8),%R10      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x28(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0xf0(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x38(%RDI,%RSI,8),%R11      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x1b8(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x60(%RDI,%RSI,8),%RAX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nLEA 0x88(%RDI,%RSI,8),%RDX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,-0x30(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RCX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xb0(%RDI,%RSI,8),%RCX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x50(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x118(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1e0(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R8)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R8)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R8)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xd8(%RDI,%RSI,8),%R8       | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x78(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x140(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x208(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R9)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x40(%RDI,%RSI,8),%R9       | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0xa0(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x168(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x230(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R10)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x68(%RDI,%RSI,8),%R10      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x8(%RDI)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0xd0(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x198(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R11)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R11)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R11)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x90(%RDI,%RSI,8),%R11      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x30(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1c0(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RAX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RAX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RAX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xb8(%RDI,%RSI,8),%RAX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x58(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x120(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1e8(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RDX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xe0(%RDI,%RSI,8),%RDX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x80(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x148(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x210(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RCX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x48(%RDI,%RSI,8),%RCX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0xa8(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x170(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x238(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R8)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R8)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R8)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x70(%RDI,%RSI,8),%R8       | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x10(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0xd8(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1a0(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R9)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x98(%RDI,%RSI,8),%R9       | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x38(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x100(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1c8(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R10)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xc0(%RDI,%RSI,8),%R10      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x60(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1f0(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R11)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R11)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R11)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xe8(%RDI,%RSI,8),%R11      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x88(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x150(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x218(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RAX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RAX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RAX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x50(%RDI,%RSI,8),%RAX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0xb0(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x178(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x240(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RDX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x78(%RDI,%RSI,8),%RDX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x18(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0xe0(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1a8(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RCX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xa0(%RDI,%RSI,8),%RCX      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0x40(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x108(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1d0(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R8)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R8)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R8)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0x19(%RSI),%R8              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 1       | 0.50\nMOVQ $0,0x68(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x130(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1f8(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R9)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA (%RDI,%R8,8),%R9            | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 1       | 0.50\nMOVQ $0,0x90(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x220(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R10)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nLEA 0xf0(%RDI,%RSI,8),%R10      | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 3       | 1\nMOVQ $0,0xb8(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x180(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x248(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R11)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R11)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R11)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x20(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0xe8(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1b0(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RAX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RAX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RAX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x48(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x110(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x1d8(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RDX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RDX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x70(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x138(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x200(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD 0x21381(%RIP),%XMM0      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 3       | 0.50\nMOVQ $0,-0x30(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RCX)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RCX)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x228(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R9)               | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R9)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0xc0(%RDI)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x250(%RDI)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,-0x30(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x98(%R10)              | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nMOVQ $0,0x160(%R10)             | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0xc8(%RDI)         | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,(%RDI,%R8,8)       | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0xf8(%RDI)         | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0xf8(%RDI,%RSI,8)  | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0x128(%RDI)        | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0x128(%RDI,%RSI,8) | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0x158(%RDI)        | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0x158(%RDI,%RSI,8) | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0x188(%RDI)        | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nVMOVSD %XMM0,0x188(%RDI,%RSI,8) | 1     | 0    | 0    | 0.50 | 0.50 | 1  | 0  | 3       | 1\nRET                             | 2     | 0    | 0    | 0.50 | 0.50 | 0  | 1  | 0       | 2\n",
        },
      },
      header = {
        "0% of peak computational performance is used (0.00 out of 2.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n - To reference allocatable arrays, use \"allocatable\" instead of \"pointer\" pointers or qualify them with the \"contiguous\" attribute (Fortran 2008)\n - For structures, limit to one indirection. For example, use a_b%c instead of a%b%c with a_b set to a%b before this function\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 155.00 to 10.00 cycles (15.50x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\ndo i a(i)%x = b(i)%x (slow, non stride 1) => do i a%x(i) = b%x(i) (fast, stride 1)\n",
          details = "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is not vectorized.\nOnly 25% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 155.00 to 41.25 cycles (3.76x speedup).",
        },
        {
          workaround = "Write less array elements",
          title = "Execution units bottlenecks",
          txt = "Performance is limited by writing data to caches/RAM (the store unit is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 155.00 to 79.00 cycles (1.96x speedup).\n",
        },
      },
      potential = {
      },
    },
  common = {
    header = {
      "The function is defined in /users/user2210/NPB3.4-MZ-MPI/BT-MZ/initialize.f90:214,230-235,243-248.\n",
    },
    nb_paths = 1,
  },
}
