/users/user2234/VersionFinaleNbody3DOptimisÃ©/nbody4.c: 34 - 82
--------------------------------------------------------------------------------

34: {
35:   srtuct_1 *une = (srtuct_1 *)arg;
36: 
37:   for (u64 i =  une->o; i <  une->o+une->n; i += 4)
38:   {
39: 
40:     u64 r1 = (u64)rand();
41:     u64 r2 = (u64)rand();
42:     f32 sign = (r1 > r2) ? 1 : -1;
43: 
44:     //
45:     une->p->x[i] = sign * (f32)rand() / (f32)RAND_MAX;
46:     une->p->y[i] = (f32)rand() / (f32)RAND_MAX;
47:     une->p->z[i] = sign * (f32)rand() / (f32)RAND_MAX;
48: 
49:     //
50:     une->p->vx[i] = (f32)rand() / (f32)RAND_MAX;
51:     une->p->vy[i] = sign * (f32)rand() / (f32)RAND_MAX;
52:     une->p->vz[i] = (f32)rand() / (f32)RAND_MAX;
53: 
54:     une->p->x[i + 1] = sign * (f32)rand() / (f32)RAND_MAX;
55:     une->p->y[i + 1] = (f32)rand() / (f32)RAND_MAX;
56:     une->p->z[i + 1] = sign * (f32)rand() / (f32)RAND_MAX;
57: 
58:     //
59:     une->p->vx[i + 1] = (f32)rand() / (f32)RAND_MAX;
60:     une->p->vy[i + 1] = sign * (f32)rand() / (f32)RAND_MAX;
61:     une->p->vz[i + 1] = (f32)rand() / (f32)RAND_MAX;
62: 
63:     une->p->x[i + 2] = sign * (f32)rand() / (f32)RAND_MAX;
64:     une->p->y[i + 2] = (f32)rand() / (f32)RAND_MAX;
65:     une->p->z[i + 2] = sign * (f32)rand() / (f32)RAND_MAX;
66: 
67:     //
68:     une->p->vx[i + 2] = (f32)rand() / (f32)RAND_MAX;
69:     une->p->vy[i + 2] = sign * (f32)rand() / (f32)RAND_MAX;
70:     une->p->vz[i + 2] = (f32)rand() / (f32)RAND_MAX;
71: 
72:     une->p->x[i + 3] = sign * (f32)rand() / (f32)RAND_MAX;
73:     une->p->y[i + 3] = (f32)rand() / (f32)RAND_MAX;
74:     une->p->z[i + 3] = sign * (f32)rand() / (f32)RAND_MAX;
75: 
76:     //
77:     une->p->vx[i + 3] = (f32)rand() / (f32)RAND_MAX;
78:     une->p->vy[i + 3] = sign * (f32)rand() / (f32)RAND_MAX;
79:     une->p->vz[i + 3] = (f32)rand() / (f32)RAND_MAX;
80:   }
81: 
82:   pthread_exit(NULL);
