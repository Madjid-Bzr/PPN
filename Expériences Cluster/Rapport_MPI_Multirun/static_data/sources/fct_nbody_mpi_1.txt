/usr/include/stdlib.h: 375 - 375
--------------------------------------------------------------------------------

375:   return strtoll (__nptr, (char **) NULL, 10);
/usr/include/x86_64-linux-gnu/bits/stdio2.h: 107 - 107
--------------------------------------------------------------------------------

107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
/users/user2234/Code_Nbody3D/nbody_mpi.c: 90 - 230
--------------------------------------------------------------------------------

90: {
91:   // Initialisation MPI
92:   MPI_Init((int *)&argc, (char ***)&argv);
93:   
94:   int mpi_world_size, mpi_rank;
95:   
96:   MPI_Comm_size(MPI_COMM_WORLD, &mpi_world_size);
97:   MPI_Comm_rank(MPI_COMM_WORLD, &mpi_rank);
98: 
99:   const u64 n = (argc > 1) ? atoll(argv[1]) : 100000;
100:   
101:   const int particles = n / mpi_world_size;
[...]
113:   p.x = aligned_alloc(64, n * sizeof(f32));
114:   p.y = aligned_alloc(64, n * sizeof(f32));
115:   p.z = aligned_alloc(64, n * sizeof(f32));
116:   p.vx = aligned_alloc(64, n * sizeof(f32));
117:   p.vy = aligned_alloc(64, n * sizeof(f32));
118:   p.vz = aligned_alloc(64, n * sizeof(f32));
119: 
120:   //
121:   srand(0);
122:   for (u64 i = 0; i < n; i++)
123:   {
124:     //
125:     u64 r1 = (u64)rand();
126:     u64 r2 = (u64)rand();
127:     f32 sign = (r1 > r2) ? 1 : -1;
128: 
129:     //
130:     p.x[i] = sign * (f32)rand() * (1 / (f32)RAND_MAX);
131:     p.y[i] = (f32)rand() * (1 / (f32)RAND_MAX);
132:     p.z[i] = sign * (f32)rand() * (1 / (f32)RAND_MAX);
133: 
134:     //
135:     p.vx[i] = (f32)rand() * (1 / (f32)RAND_MAX);
136:     p.vy[i] = sign * (f32)rand() * (1 / (f32)RAND_MAX);
137:     p.vz[i] = (f32)rand() * (1 / (f32)RAND_MAX);
138:   }
139: 
140:   MPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, p.x, particles, MPI_FLOAT, MPI_COMM_WORLD);
141:   MPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, p.y, particles, MPI_FLOAT, MPI_COMM_WORLD);
142:   MPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, p.z, particles, MPI_FLOAT, MPI_COMM_WORLD);
143:   MPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, p.vx, particles, MPI_FLOAT, MPI_COMM_WORLD);
144:   MPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, p.vy, particles, MPI_FLOAT, MPI_COMM_WORLD);
145:   MPI_Allgather(MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, p.vz, particles, MPI_FLOAT, MPI_COMM_WORLD);
146:   const u64 s = sizeof(particle_t) * n;
147:   if (mpi_rank == 0)
148:   {
149:     const u64 num_threads = omp_get_max_threads();
150:     printf("\n\033[1mTotal memory size:\033[0m %llu B, %llu KiB, %llu MiB\n\n", s, s >> 10, s >> 20);
151:     printf("n= %llu \n", n);
152:     //
153:     printf("\033[1m%5s %10s %10s %8s\033[0m\n", "Step", "Time, s", "Interact/s", "GFLOP/s");
154:     fflush(stdout);
155:   }
156: 
157:   
158:   for (u64 i = 0; i < steps; i++)
159:   {
160:     // Measure
161:     const f64 start = omp_get_wtime();
162: 
163:     move_particles(p, n, dt, mpi_rank, mpi_world_size, particles);
164: 
165:     const f64 end = omp_get_wtime();
166: 
167:     // Number of interactions/iterations
168:     const f32 h1 = (f32)(n) * (f32)(n - 1);
169: 
170:     // GFLOPS
171:     const f32 h2 = ((23.0 * h1) + (3.0 * (f32)n)) * 1e-9;
172: 
173:     if (i >= warmup)
174:     {
175:       rate += (h2 * (1 / (end - start)));
176:       drate += ((h2 * h2) * (1 / ((end - start) * (end - start))));
177:     }
178:     if (mpi_rank == 0)
179:     {
180:       //
181:       printf("%5llu %10.3e %10.3e %8.1f %s\n",
182:              i,
183:              (end - start),
184:              h1 * (1 / (end - start)),
185:              h2 * (1 / (end - start)),
186:              (i < warmup) ? "*" : "");
187:     }
188:     fflush(stdout);
189:   }
190: 
191:   //
192:   rate = rate * (1 / (f64)(steps - warmup));
193:   drate = sqrtf(drate * (1 / (f64)(steps - warmup)) - (rate * rate));
194:   if (mpi_rank == 0)
[...]
201:        f64 somme_x=0, somme_y=0, somme_z=0, somme_vx=0, somme_vy=0, somme_vz=0;
202:   for(int i=0;i<n; i++){
203:     somme_x+=p.x[i];
204:     somme_y+=p.y[i];
205:     somme_z+=p.z[i];
206:     somme_vx+=p.vx[i];
207:     somme_vy+=p.vy[i];
208:     somme_vz+=p.vz[i];
[...]
220:   free(p.x);
221:   free(p.y);
222:   free(p.z);
223:   free(p.vx);
224:   free(p.vy);
225:   free(p.vz);
226: 
227:   //
228:   MPI_Finalize();
229:   return 0;
230: }
