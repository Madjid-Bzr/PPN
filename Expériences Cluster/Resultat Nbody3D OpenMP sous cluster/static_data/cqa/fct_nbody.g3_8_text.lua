_cqa_text_report = {
  paths = {
    {
      hint = {
        {
          details = "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 2 occurrences\n",
          title = "CALL instructions",
          txt = "Detected function call instructions.\n",
        },
        {
          title = "Type of elements and instruction set",
          txt = "24 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).\n",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function is composed of 48 FP arithmetical operations:\n - 24: addition or subtraction (all inside FMA instructions)\n - 24: multiply (all inside FMA instructions)\nThe binary function is loading 260 bytes (65 single precision FP elements).\nThe binary function is storing 96 bytes (24 single precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.13 FP operations per loaded or stored byte.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 143\nloop length        : 698\nused x86 registers : 15\nused mmx registers : 0\nused xmm registers : 16\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\ninstruction fetch    : 44.00 cycles\ninstruction queue    : 71.50 cycles\ndecoding             : 71.50 cycles\nmicro-operation queue: 75.00 cycles\nfront end            : 75.00 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1    | P2    | P3    | P4    | P5    | P6\n--------------------------------------------------------------\nuops   | 21.50 | 21.50 | 43.00 | 43.00 | 30.50 | 30.50 | 29.00\ncycles | 21.50 | 21.50 | 43.00 | 43.00 | 30.50 | 30.50 | 29.00\n\nCycles executing div or sqrt instructions: 22.00-95.00\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 75.00\nDispatch  : 43.00\nDIV/SQRT  : 22.00-95.00\nOverall L1: 75.00-95.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 0%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : 0%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : 0%\ndiv/sqrt: 0%\nother   : 0%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 12%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 12%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 11%\nFP\nall     : 6%\nload    : 6%\nstore   : 6%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : 6%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 7%\nload    : 6%\nstore   : 6%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 12%\nfma     : 6%\ndiv/sqrt: 12%\nother   : 11%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 95.00 cycles. At this rate:\n - 2% of peak load performance is reached (2.74 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 1% of peak store performance is reached (1.01 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Found no such bottlenecks.",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 20a0\n\nInstruction                               | Nb FU | P0    | P1   | P2   | P3   | P4    | P5   | P6 | Latency | Recip. throughput\n--------------------------------------------------------------------------------------------------------------------------------\nENDBR64\nPUSH %RBP                                 | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nMOV %RSP,%RBP                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nPUSH %R14                                 | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R13                                 | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R12                                 | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %RBX                                 | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nMOV 0x8(%RDI),%RBX                        | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %RBX,%RBX                            | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJE 24fe <move_particles._omp_fn.1+0x45e>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV %RDI,%R13                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nCALL 1170 <.plt.sec@start+0x60>           | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOVSXD %EAX,%R12                          | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nCALL 1140 <.plt.sec@start+0x30>           | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nXOR %EDX,%EDX\nMOVSXD %EAX,%RCX                          | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nLEA 0x3(%RBX),%RAX                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSHR $0x2,%RAX                             | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nDIV %R12                                  | 23    | 11.50 | 0    | 0    | 0    | 11.50 | 0    | 0  | 39-95   | 22-95\nCMP %RDX,%RCX                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJB 2510 <move_particles._omp_fn.1+0x470>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nIMUL %RAX,%RCX                            | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 5       | 2\nADD %RCX,%RDX                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %RDX,%RAX                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMP %RAX,%RDX                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJAE 24fe <move_particles._omp_fn.1+0x45e> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV (%R13),%RSI                           | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nVMOVSS 0x10(%R13),%XMM0                   | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nLEA (,%RDX,4),%RBX                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSAL $0x4,%RDX                             | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nMOV %RBX,%R14                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nLEA (,%RAX,4),%R11                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x4(%RBX),%RAX                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV (%RSI),%R13                           | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x18(%RSI),%R10                       | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nNOT %R14                                  | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x8(%RSI),%R12                        | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x20(%RSI),%R9                        | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nADD %R11,%R14                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %RDX,%R13                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x28(%RSI),%R8                        | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x10(%RSI),%RDI                       | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nSHR $0x2,%R14                             | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nVMOVSS (%R10,%RBX,4),%XMM1                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nADD %RDX,%R12                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nAND $0x1,%R14D                            | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x10(%R13),%RSI                       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVFMADD213SS (%R13),%XMM0,%XMM1            | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nADD %RDX,%RDI                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x10(%R12),%RCX                       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x10(%RDI),%RDX                       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVMOVSS %XMM1,(%R13)                       | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS (%R9,%RBX,4),%XMM2                 | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS (%R12),%XMM0,%XMM2            | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM2,(%R12)                       | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS (%R8,%RBX,4),%XMM3                 | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS (%RDI),%XMM0,%XMM3            | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM3,(%RDI)                       | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x4(%R10,%RBX,4),%XMM4             | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x4(%R13),%XMM0,%XMM4         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM4,0x4(%R13)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x4(%R9,%RBX,4),%XMM5              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x4(%R12),%XMM0,%XMM5         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM5,0x4(%R12)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x4(%R8,%RBX,4),%XMM6              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x4(%RDI),%XMM0,%XMM6         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM6,0x4(%RDI)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x8(%R10,%RBX,4),%XMM7             | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x8(%R13),%XMM0,%XMM7         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM7,0x8(%R13)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x8(%R9,%RBX,4),%XMM8              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x8(%R12),%XMM0,%XMM8         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM8,0x8(%R12)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x8(%R8,%RBX,4),%XMM9              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x8(%RDI),%XMM0,%XMM9         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM9,0x8(%RDI)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0xc(%R10,%RBX,4),%XMM10            | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0xc(%R13),%XMM0,%XMM10        | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM10,0xc(%R13)                   | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0xc(%R9,%RBX,4),%XMM11             | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0xc(%R12),%XMM0,%XMM11        | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM11,0xc(%R12)                   | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0xc(%R8,%RBX,4),%XMM12             | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0xc(%RDI),%XMM0,%XMM12        | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM12,0xc(%RDI)                   | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nCMP %RAX,%R11                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJBE 24fe <move_particles._omp_fn.1+0x45e> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %R14,%R14                            | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJE 2338 <move_particles._omp_fn.1+0x298>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nVMOVSS (%R10,%RAX,4),%XMM13               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS (%RSI),%XMM0,%XMM13           | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM13,(%RSI)                      | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS (%R9,%RAX,4),%XMM14                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS (%RCX),%XMM0,%XMM14           | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM14,(%RCX)                      | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS (%R8,%RAX,4),%XMM15                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS (%RDX),%XMM0,%XMM15           | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM15,(%RDX)                      | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x4(%R10,%RAX,4),%XMM1             | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x4(%RSI),%XMM0,%XMM1         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM1,0x4(%RSI)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x4(%R9,%RAX,4),%XMM2              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x4(%RCX),%XMM0,%XMM2         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM2,0x4(%RCX)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x4(%R8,%RAX,4),%XMM3              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x4(%RDX),%XMM0,%XMM3         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM3,0x4(%RDX)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x8(%R10,%RAX,4),%XMM4             | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x8(%RSI),%XMM0,%XMM4         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM4,0x8(%RSI)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x8(%R9,%RAX,4),%XMM5              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x8(%RCX),%XMM0,%XMM5         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM5,0x8(%RCX)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x8(%R8,%RAX,4),%XMM6              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x8(%RDX),%XMM0,%XMM6         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM6,0x8(%RDX)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0xc(%R10,%RAX,4),%XMM7             | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0xc(%RSI),%XMM0,%XMM7         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM7,0xc(%RSI)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0xc(%R9,%RAX,4),%XMM8              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nLEA 0x20(%R13),%RSI                       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVFMADD213SS 0xc(%RCX),%XMM0,%XMM8         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM8,0xc(%RCX)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0xc(%R8,%RAX,4),%XMM9              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nLEA 0x8(%RBX),%RAX                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVFMADD213SS 0xc(%RDX),%XMM0,%XMM9         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nLEA 0x20(%R12),%RCX                       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVMOVSS %XMM9,0xc(%RDX)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nLEA 0x20(%RDI),%RDX                       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMP %RAX,%R11                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJBE 24fe <move_particles._omp_fn.1+0x45e> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nNOPL (%RAX)                               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nPOP %RBX                                  | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R12                                  | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R13                                  | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R14                                  | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %RBP                                  | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nRET\nNOPW (%RAX,%RAX,1)                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nADD $0x1,%RAX                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nXOR %EDX,%EDX\nJMP 20e5 <move_particles._omp_fn.1+0x45>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nNOPL (%RAX,%RAX,1)                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\n",
        },
      },
      header = {
        "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
        "0% of peak computational performance is used (0.51 out of 64.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 95.00 to 44.00 cycles (2.16x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
          details = "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is not vectorized.\nOnly 7% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 95.00 to 11.87 cycles (8.00x speedup).",
        },
        {
          workaround = " - Reduce the number of division or square root instructions:\n  * If denominator is constant over iterations, use reciprocal (replace x/y with x*(1/y)). Check precision impact. This will be done by your compiler with ffast-math or Ofast\n - If you accept to loose numerical precision up to 2 ulp, you can speedup your code by passing the following options to your compiler: (ffast-math or Ofast) and mrecip\n",
          title = "Execution units bottlenecks",
          txt = "Performance is limited by execution of divide and square root operations (the divide/square root unit is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 95.00 to 75.00 cycles (1.27x speedup).\n",
        },
      },
      potential = {
        {
          title = "Expensive FP math instructions/calls",
          txt = "Detected performance impact from expensive FP math instructions/calls.\nBy removing/reexpressing them, you can lower the cost of an iteration from 95.00 to 75.00 cycles (1.27x speedup).",
        },
        {
          title = "FMA",
          txt = "Detected 24 FMA (fused multiply-add) operations.",
        },
      },
    },
  },
  AVG = {
      hint = {
        {
          details = "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 2 occurrences\n",
          title = "CALL instructions",
          txt = "Detected function call instructions.\n",
        },
        {
          title = "Type of elements and instruction set",
          txt = "24 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).\n",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function is composed of 48 FP arithmetical operations:\n - 24: addition or subtraction (all inside FMA instructions)\n - 24: multiply (all inside FMA instructions)\nThe binary function is loading 260 bytes (65 single precision FP elements).\nThe binary function is storing 96 bytes (24 single precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.13 FP operations per loaded or stored byte.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 143\nloop length        : 698\nused x86 registers : 15\nused mmx registers : 0\nused xmm registers : 16\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\ninstruction fetch    : 44.00 cycles\ninstruction queue    : 71.50 cycles\ndecoding             : 71.50 cycles\nmicro-operation queue: 75.00 cycles\nfront end            : 75.00 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1    | P2    | P3    | P4    | P5    | P6\n--------------------------------------------------------------\nuops   | 21.50 | 21.50 | 43.00 | 43.00 | 30.50 | 30.50 | 29.00\ncycles | 21.50 | 21.50 | 43.00 | 43.00 | 30.50 | 30.50 | 29.00\n\nCycles executing div or sqrt instructions: 22.00-95.00\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 75.00\nDispatch  : 43.00\nDIV/SQRT  : 22.00-95.00\nOverall L1: 75.00-95.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 0%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : 0%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : 0%\ndiv/sqrt: 0%\nother   : 0%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 12%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 12%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 11%\nFP\nall     : 6%\nload    : 6%\nstore   : 6%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : 6%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 7%\nload    : 6%\nstore   : 6%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 12%\nfma     : 6%\ndiv/sqrt: 12%\nother   : 11%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 95.00 cycles. At this rate:\n - 2% of peak load performance is reached (2.74 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 1% of peak store performance is reached (1.01 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Found no such bottlenecks.",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 20a0\n\nInstruction                               | Nb FU | P0    | P1   | P2   | P3   | P4    | P5   | P6 | Latency | Recip. throughput\n--------------------------------------------------------------------------------------------------------------------------------\nENDBR64\nPUSH %RBP                                 | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nMOV %RSP,%RBP                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nPUSH %R14                                 | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R13                                 | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %R12                                 | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nPUSH %RBX                                 | 1     | 0     | 0    | 0    | 0    | 1     | 1    | 0  | 0       | 1\nMOV 0x8(%RDI),%RBX                        | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nTEST %RBX,%RBX                            | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJE 24fe <move_particles._omp_fn.1+0x45e>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV %RDI,%R13                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nCALL 1170 <.plt.sec@start+0x60>           | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nMOVSXD %EAX,%R12                          | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nCALL 1140 <.plt.sec@start+0x30>           | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 2\nXOR %EDX,%EDX\nMOVSXD %EAX,%RCX                          | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nLEA 0x3(%RBX),%RAX                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSHR $0x2,%RAX                             | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nDIV %R12                                  | 23    | 11.50 | 0    | 0    | 0    | 11.50 | 0    | 0  | 39-95   | 22-95\nCMP %RDX,%RCX                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJB 2510 <move_particles._omp_fn.1+0x470>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nIMUL %RAX,%RCX                            | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 5       | 2\nADD %RCX,%RDX                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %RDX,%RAX                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMP %RAX,%RDX                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJAE 24fe <move_particles._omp_fn.1+0x45e> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nMOV (%R13),%RSI                           | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nVMOVSS 0x10(%R13),%XMM0                   | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nLEA (,%RDX,4),%RBX                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nSAL $0x4,%RDX                             | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nMOV %RBX,%R14                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nLEA (,%RAX,4),%R11                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x4(%RBX),%RAX                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV (%RSI),%R13                           | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x18(%RSI),%R10                       | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nNOT %R14                                  | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x8(%RSI),%R12                        | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x20(%RSI),%R9                        | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nADD %R11,%R14                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nADD %RDX,%R13                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nMOV 0x28(%RSI),%R8                        | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nMOV 0x10(%RSI),%RDI                       | 1     | 0     | 0    | 1    | 0    | 0     | 0    | 0  | 4       | 1\nSHR $0x2,%R14                             | 1     | 0     | 0    | 0    | 0    | 1     | 0    | 0  | 1       | 1\nVMOVSS (%R10,%RBX,4),%XMM1                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nADD %RDX,%R12                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nAND $0x1,%R14D                            | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x10(%R13),%RSI                       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVFMADD213SS (%R13),%XMM0,%XMM1            | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nADD %RDX,%RDI                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x10(%R12),%RCX                       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nLEA 0x10(%RDI),%RDX                       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVMOVSS %XMM1,(%R13)                       | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS (%R9,%RBX,4),%XMM2                 | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS (%R12),%XMM0,%XMM2            | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM2,(%R12)                       | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS (%R8,%RBX,4),%XMM3                 | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS (%RDI),%XMM0,%XMM3            | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM3,(%RDI)                       | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x4(%R10,%RBX,4),%XMM4             | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x4(%R13),%XMM0,%XMM4         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM4,0x4(%R13)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x4(%R9,%RBX,4),%XMM5              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x4(%R12),%XMM0,%XMM5         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM5,0x4(%R12)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x4(%R8,%RBX,4),%XMM6              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x4(%RDI),%XMM0,%XMM6         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM6,0x4(%RDI)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x8(%R10,%RBX,4),%XMM7             | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x8(%R13),%XMM0,%XMM7         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM7,0x8(%R13)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x8(%R9,%RBX,4),%XMM8              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x8(%R12),%XMM0,%XMM8         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM8,0x8(%R12)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x8(%R8,%RBX,4),%XMM9              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x8(%RDI),%XMM0,%XMM9         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM9,0x8(%RDI)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0xc(%R10,%RBX,4),%XMM10            | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0xc(%R13),%XMM0,%XMM10        | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM10,0xc(%R13)                   | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0xc(%R9,%RBX,4),%XMM11             | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0xc(%R12),%XMM0,%XMM11        | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM11,0xc(%R12)                   | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0xc(%R8,%RBX,4),%XMM12             | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0xc(%RDI),%XMM0,%XMM12        | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM12,0xc(%RDI)                   | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nCMP %RAX,%R11                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJBE 24fe <move_particles._omp_fn.1+0x45e> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nTEST %R14,%R14                            | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJE 2338 <move_particles._omp_fn.1+0x298>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nVMOVSS (%R10,%RAX,4),%XMM13               | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS (%RSI),%XMM0,%XMM13           | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM13,(%RSI)                      | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS (%R9,%RAX,4),%XMM14                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS (%RCX),%XMM0,%XMM14           | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM14,(%RCX)                      | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS (%R8,%RAX,4),%XMM15                | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS (%RDX),%XMM0,%XMM15           | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM15,(%RDX)                      | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x4(%R10,%RAX,4),%XMM1             | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x4(%RSI),%XMM0,%XMM1         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM1,0x4(%RSI)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x4(%R9,%RAX,4),%XMM2              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x4(%RCX),%XMM0,%XMM2         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM2,0x4(%RCX)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x4(%R8,%RAX,4),%XMM3              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x4(%RDX),%XMM0,%XMM3         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM3,0x4(%RDX)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x8(%R10,%RAX,4),%XMM4             | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x8(%RSI),%XMM0,%XMM4         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM4,0x8(%RSI)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x8(%R9,%RAX,4),%XMM5              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x8(%RCX),%XMM0,%XMM5         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM5,0x8(%RCX)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0x8(%R8,%RAX,4),%XMM6              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0x8(%RDX),%XMM0,%XMM6         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM6,0x8(%RDX)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0xc(%R10,%RAX,4),%XMM7             | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nVFMADD213SS 0xc(%RSI),%XMM0,%XMM7         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM7,0xc(%RSI)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0xc(%R9,%RAX,4),%XMM8              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nLEA 0x20(%R13),%RSI                       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVFMADD213SS 0xc(%RCX),%XMM0,%XMM8         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nVMOVSS %XMM8,0xc(%RCX)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nVMOVSS 0xc(%R8,%RAX,4),%XMM9              | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 0  | 5       | 0.50\nLEA 0x8(%RBX),%RAX                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVFMADD213SS 0xc(%RDX),%XMM0,%XMM9         | 1     | 0.50  | 0.50 | 0.50 | 0.50 | 0     | 0    | 0  | 6       | 0.50\nLEA 0x20(%R12),%RCX                       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nVMOVSS %XMM9,0xc(%RDX)                    | 1     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 2       | 1\nLEA 0x20(%RDI),%RDX                       | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nCMP %RAX,%R11                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nJBE 24fe <move_particles._omp_fn.1+0x45e> | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 1-2\nNOPL (%RAX)                               | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nPOP %RBX                                  | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R12                                  | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R13                                  | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %R14                                  | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nPOP %RBP                                  | 2     | 0     | 0    | 0.50 | 0.50 | 0     | 0    | 1  | 0       | 1\nRET\nNOPW (%RAX,%RAX,1)                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\nADD $0x1,%RAX                             | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 1       | 0.50\nXOR %EDX,%EDX\nJMP 20e5 <move_particles._omp_fn.1+0x45>  | 1     | 0     | 0    | 0    | 0    | 0     | 1    | 0  | 0       | 2\nNOPL (%RAX,%RAX,1)                        | 1     | 0     | 0    | 0    | 0    | 0.50  | 0.50 | 0  | 0       | 0.50\n",
        },
      },
      header = {
        "Warnings:\nDetected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.",
        "0% of peak computational performance is used (0.51 out of 64.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 95.00 to 44.00 cycles (2.16x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
          details = "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is not vectorized.\nOnly 7% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 95.00 to 11.87 cycles (8.00x speedup).",
        },
        {
          workaround = " - Reduce the number of division or square root instructions:\n  * If denominator is constant over iterations, use reciprocal (replace x/y with x*(1/y)). Check precision impact. This will be done by your compiler with ffast-math or Ofast\n - If you accept to loose numerical precision up to 2 ulp, you can speedup your code by passing the following options to your compiler: (ffast-math or Ofast) and mrecip\n",
          title = "Execution units bottlenecks",
          txt = "Performance is limited by execution of divide and square root operations (the divide/square root unit is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 95.00 to 75.00 cycles (1.27x speedup).\n",
        },
      },
      potential = {
        {
          title = "Expensive FP math instructions/calls",
          txt = "Detected performance impact from expensive FP math instructions/calls.\nBy removing/reexpressing them, you can lower the cost of an iteration from 95.00 to 75.00 cycles (1.27x speedup).",
        },
        {
          title = "FMA",
          txt = "Detected 24 FMA (fused multiply-add) operations.",
        },
      },
    },
  common = {
    header = {
      "The function is defined in /users/user2234/VersionFinaleNbody3DOptimisé/nbody3.c:119-136.\n",
      "Warnings:\nIgnoring paths for analysis",
    },
  },
}
